{"version":3,"sources":["Home.js","App.js","webpack:///./src/index.js?b635"],"names":["SUBSCRIPTION","gql","Home","useSubscription","data","loading","useState","instrument","setInstrument","version","setVersion","allPredictions","_","get","versionsPredictions","filter","versions","uniq","map","useEffect","Math","max","instruments","first","instrumentsVersionsPredictions","className","value","onChange","e","target","isEmpty","key","icon","faSpinner","spin","size","Chart","memo","graphData","actual","prediction","largestVal","reduce","total","current","abs","Infinity","domain","margin","top","bottom","type","dataKey","name","label","position","offset","angle","orientation","cursor","strokeDasharray","fill","x","y","isEqual","proptypes","PropTypes","array","App","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","timeout","link","split","query","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1adf758.chunk.js","sourcesContent":["\nimport React, { memo, useEffect, useState } from \"react\";\nimport PropTypes from \"proptypes\";\nimport { useSubscription } from \"@apollo/react-hooks\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\nimport _ from \"lodash\";\nimport gql from \"graphql-tag\";\nimport { ResponsiveContainer, ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, ReferenceLine } from \"recharts\";\n\nconst SUBSCRIPTION = gql`\nsubscription SubcribeVersions {\n    predictions ( where: { prediction: { _is_null: false }, actual: { _is_null: false }}) {\n        actual id time\n        instrument\n        prediction\n        _version\n    }\n}`;\n\nexport default function Home () {\n\tconst { data, loading } = useSubscription( SUBSCRIPTION );\n\tconst [ instrument, setInstrument ] = useState( false );\n\tconst [ version, setVersion ] = useState( false );\n\n\tconst allPredictions = _.get( data, \"predictions\" );\n\tconst versionsPredictions = _.filter( allPredictions, [ \"_version\", version ]);\n\n\tconst versions = _.uniq( _.map( allPredictions, \"_version\" ));\n\tuseEffect(() => { if ( !version ) setVersion( Math.max( versions ));}, [ versions ]);\n\n\tconst instruments = _.uniq( _.map( versionsPredictions, \"instrument\" ));\n\tuseEffect(() => { if ( !instrument ) setInstrument( _.first( instruments ));}, [ instruments ]);\n    \n\tconst instrumentsVersionsPredictions = _.filter( versionsPredictions, [ \"instrument\", instrument ]);\n\n\treturn (\n\t\t<div className=\"body\">\n\t\t\t<div className=\"header\">\n\t\t\t\t<h2>Visualisation and Stats analysis of my ML model</h2>\n\t\t\t\t<p>All predictions pulled for my model, visualised and analysed.</p>\n\t\t\t</div>\n\n\t\t\t<div className=\"options\">\n\t\t\t\t<div>\n\t\t\t\t\t<p>Select Version:</p>\n\t\t\t\t\t<select value={ version } onChange={ e => setVersion( e.target.value )}>\n\t\t\t\t\t\t{ !_.isEmpty( versions ) && _.map( versions, version => <option key={ version } value={ version }>{ version }</option> ) }\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<p>Select Instruments:</p>\n\t\t\t\t\t<select value={ instrument } onChange={ e => setInstrument( e.target.value )}>\n\t\t\t\t\t\t{ !_.isEmpty( instruments ) && _.map( instruments, instrument => <option key={ instrument } value={ instrument }>{ instrument }</option> ) }\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{ loading && \n\t\t\t\t<div className=\"loader\">\n\t\t\t\t\t<FontAwesomeIcon icon={ faSpinner } spin size=\"3x\" />\n\t\t\t\t</div> \n\t\t\t}\n\n\t\t\t{ ( !loading && !_.isEmpty( instrumentsVersionsPredictions )) &&\n\t\t\t\t<div className=\"chart\">\n\t\t\t\t\t<Chart data={ instrumentsVersionsPredictions } />\n\t\t\t\t</div> \n\t\t\t}\n\n\t\t\t{ ( !loading && _.isEmpty( instrumentsVersionsPredictions )) &&\n\t\t\t\t<p>Nothing to display - change a filter!</p>\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nconst Chart = memo( function Chart ({ data }) {\n\tconst graphData = _.map( data, ({ actual, prediction }) => ({ actual: actual * 100, prediction: prediction * 100 }));\n\n\tconst largestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = Math.abs( _.get( current, \"actual\" ));\n\t\tconst prediction = Math.abs( _.get( current, \"prediction\" ));\n\t\tif ( actual > prediction && actual > total ) return actual > total ? actual : total;\n\t\tif ( prediction > actual && prediction > total ) return prediction > total ? prediction: total;\n\t}, -Infinity );\n\tconst domain = [ -1 * largestVal, largestVal ];\n\t\n\treturn (\n\t\t<ResponsiveContainer>\n\t\t\t<ScatterChart margin={{ top: 20, bottom: 20 }}>\n\t\t\t\t<CartesianGrid />\n\t\t\t\t<XAxis type=\"number\" dataKey=\"actual\" name=\"actual\" domain={ domain } label={{ value: \"Actual Change (cents)\", position: \"bottom\", offset: 0 }} />\n\t\t\t\t<YAxis type=\"number\" dataKey=\"prediction\" name=\"prediction\" domain={ domain } label={{ value: \"Predicted Change (cents)\", position: \"centerBottom\", angle: 90, offset: 5 }} orientation=\"right\" />\n\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n\t\t\t\t<Scatter name=\"A school\" data={ graphData } fill=\"#f9bc60\" />\n\t\t\t\t<ReferenceLine x=\"actual\" y=\"prediction\" />\n\t\t\t</ScatterChart>\n\t\t</ResponsiveContainer>\n\t);\n}, _.isEqual );\nChart.proptypes = {\n\tdata: PropTypes.array,\n};\n","\nimport React from \"react\";\nimport Home from \"./Home\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-client\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { split } from \"apollo-link\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nexport default function App () {\n\n\tconst httpLink = new HttpLink({\n\t\turi: \"https://boiling-ridge-24261.herokuapp.com/v1/graphql\",\n\t});\n    \n\tconst wsLink = new WebSocketLink({\n\t\turi: \"wss://boiling-ridge-24261.herokuapp.com/v1/graphql\",\n\t\toptions: {\n\t\t\treconnect: true,\n\t\t\ttimeout: 30000,\n\t\t},\n\t});\n\n\tconst link = split(\n\t\t({ query }) => {\n\t\t\tconst { kind, operation } = getMainDefinition( query );\n\t\t\treturn kind === \"OperationDefinition\" && operation === \"subscription\";\n\t\t},\n\t\twsLink,\n\t\thttpLink,\n\t);\n\n\tconst client = new ApolloClient({\n\t\tlink,\n\t\tcache: new InMemoryCache(),\n\t});\n\n\treturn (\n\t\t<ApolloProvider client={ client }>\n\t\t\t<Home />\n\t\t</ApolloProvider>\n\t);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById( \"root\" ),\n);\n"],"sourceRoot":""}