{"version":3,"sources":["Views/Absolute.js","Views/Change.js","Views/Highs.js","Home.js","App.js","webpack:///./src/index.js?b635"],"names":["Absolute","data","className","DotChartPrice","memo","graphData","_","map","actual","prediction","Number","toFixed","z","largestVal","reduce","total","current","get","Infinity","domain","margin","top","bottom","right","left","type","dataKey","name","label","value","position","offset","angle","range","cursor","strokeDasharray","fill","shape","line","stroke","strokeWidth","lineType","DotChartDifference","close","actualsStDev","standardDeviation","negActualsStDev","x","y","DistributionChart","variations","max","min","intervalLength","sampleMean","mean","start","numberOfIntervals","i","middle","matchedVariations","filter","variation","size","positiveStDevLineX","negativeStDevLineX","orientation","Stats","useState","threshold","setThreshold","sampleCount","differences","id","accuracy","actuals","actualStDev","threshStDev","upAUpP","upAFlatP","upADownP","upATotal","upPTotal","flatAUpP","flatAFlatP","flatADownP","flatATotal","flatPTotal","downAUpP","downAFlatP","downADownP","downATotal","downPTotal","accuracyMean","accuracyStandardDev","onChange","e","target","Change","DotChart","Math","abs","ceil","console","log","actualsMean","sampleStandardDev","GET_VERSIONS","gql","GET_PREDICTIONS","Home","version","setVersion","includeBackPredicted","setIncludeBackPredicted","daysBack","setDaysBack","start_time","Date","toISOString","now","versionsData","useQuery","useLazyQuery","getPredictions","loading","versions","versionId","predictions","prediction_type","instrument","granularity","depth","useEffect","isEmpty","last","variables","was_back_predicted","find","key","onClick","icon","faCheck","faTimes","faSpinner","spin","App","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.811bc955.chunk.js","sourcesContent":["\nimport React, { memo, useState } from \"react\";\nimport PropTypes from \"proptypes\";\nimport _ from \"lodash\";\nimport { ResponsiveContainer, ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, ReferenceLine } from \"recharts\";\nimport { min, max, mean, standardDeviation } from \"simple-statistics\";\n\nexport default function Absolute ({ data }) {    \n\treturn (\n\t\t<div className=\"charts absolute\">\n\t\t\t<hr />\n\t\t\t<div className=\"stats\">\n\t\t\t\t<Stats data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"distribution\">\n\t\t\t\t<DistributionChart data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"scatter\">\n\t\t\t\t<DotChartDifference data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"scatter\">\n\t\t\t\t<DotChartPrice data={ data } />\n\t\t\t</div>\n\t\t</div> \n\n\t);\n}\nAbsolute.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst DotChartPrice = memo( function DotChartPrice ({ data }) {\n\tconst graphData = _.map( data, ({ actual, prediction }) => ({ actual: Number(( actual ).toFixed( 4 )), prediction: Number(( prediction ).toFixed( 4 )), z: 1 }));\n\n\tconst largestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual > prediction ) return actual > total ? actual : total;\n\t\treturn prediction > total ? prediction: total;\n\t}, -Infinity );\n\tconst smallestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual < prediction ) return actual < total ? actual : total;\n\t\treturn prediction < total ? prediction: total;\n\t}, Infinity );\n\tconst domain =  [ smallestVal, largestVal ];\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Price distribution scatter</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 50, bottom: 20, right: 70, left: 20 }}>\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<XAxis type=\"number\" dataKey=\"actual\" name=\"actual\" domain={ domain } label={{ value: \"Actual Change (cents)\", position: \"bottom\", offset: 0 }} />\n\t\t\t\t\t<YAxis type=\"number\" dataKey=\"prediction\" name=\"prediction\" domain={ domain } label={{ value: \"Predicted Change (cents)\", position: \"left\", angle: -90, offset: 0 }} />\n\t\t\t\t\t<ZAxis dataKey=\"z\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n\t\t\t\t\t<Scatter data={ graphData } fill=\"#82ca9d\" shape=\"circle\" line={{ stroke: \"#e16162\", strokeWidth: 1 }} lineType=\"fitting\" />\n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n});\nDotChartPrice.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst DotChartDifference = memo( function DotChartDifference ({ data }) {\n\tconst graphData = _.map( data, ({ actual, prediction, close }) => ({ actual: Number(( actual - close ).toFixed( 4 )), prediction: Number(( prediction - close ).toFixed( 4 )), z: 1 }));\n\tconst actualsStDev = standardDeviation( _.map( graphData, \"actual\" ));\n\tconst negActualsStDev = actualsStDev * -1;\n\t\n\tconst largestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual > prediction ) return actual > total ? actual : total;\n\t\treturn prediction > total ? prediction: total;\n\t}, -Infinity );\n\tconst smallestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual < prediction ) return actual < total ? actual : total;\n\t\treturn prediction < total ? prediction: total;\n\t}, Infinity );\n\tconst domain =  [ smallestVal, largestVal ];\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Prediction difference distribution scatter</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 50, bottom: 20, right: 70, left: 20 }}>\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<XAxis type=\"number\" dataKey=\"actual\" name=\"actual\" domain={ domain } label={{ value: \"Actual Change (cents)\", position: \"bottom\", offset: 0 }} />\n\t\t\t\t\t<YAxis type=\"number\" dataKey=\"prediction\" name=\"prediction\" domain={ domain } label={{ value: \"Predicted Change (cents)\", position: \"left\", angle: -90, offset: 0 }} />\n\t\t\t\t\t<ZAxis dataKey=\"z\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n\t\t\t\t\t<Scatter data={ graphData } fill=\"#82ca9d\" shape=\"circle\" line={{ stroke: \"#e16162\", strokeWidth: 2 }} lineType=\"fitting\" />\n\t\t\t\t\t<ReferenceLine x={ actualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"+ σ\", position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ negActualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"- σ\", position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine y={ actualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"+ σ\", position: \"insideTopLeft\" }} />\n\t\t\t\t\t<ReferenceLine y={ negActualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"- σ\", position: \"insideTopLeft\" }} /> \n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n});\nDotChartDifference.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst DistributionChart = memo( function DistributionChart ({ data }) {\n\tconst numberOfIntervals = 50;\n\t\n\tconst variations = _.map( data, ({ actual, prediction }) => Number(( prediction - actual ).toFixed( 4 )));\n\tconst range = 2 * max([ 0 - min( variations ), max( variations ) ]);\n\tconst intervalLength = range / numberOfIntervals; \n\tconst sampleMean = mean( variations );\n\tconst actualsStDev = standardDeviation( variations );\n\tconst start = range / 2 * -1;\n\n\tconst graphData = _.map( _.range( 0, numberOfIntervals + 1 ), i => {\n\t\tconst bottom = Number(( start + intervalLength * ( i - 0.5 )).toFixed( 5 ));\n\t\tconst middle = Number(( start + intervalLength * ( i )).toFixed( 5 ));\n\t\tconst top = Number(( start + intervalLength * ( i + 0.5 )).toFixed( 5 )); \n\t\tconst matchedVariations = _.filter( variations, variation => variation > bottom && variation <= top );\n\t\treturn { name: middle, value: _.size( matchedVariations ), size: 0 };\n\t});\n\t\n\tconst positiveStDevLineX = sampleMean + actualsStDev;\n\tconst negativeStDevLineX = sampleMean - actualsStDev;\n\t\t\n\treturn (\n\t\t<>\n\t\t\t<h3>Variations distribution</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 20, bottom: 20, left: -25 }} >\n\t\t\t\t\t<XAxis dataKey=\"name\" />\n\t\t\t\t\t<YAxis dataKey=\"value\" />\n\t\t\t\t\t<ZAxis dataKey=\"size\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }}/>\n\t\t\t\t\t<Scatter data={ graphData } line={{ stroke: \"#82ca9d\", strokeWidth: 1 }} stroke=\"#82ca9d\" />\n\t\t\t\t\t<ReferenceLine x={ sampleMean } stroke=\"#C98BBE\" label={{ value: \"Mean\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ positiveStDevLineX } stroke=\"#C98BBE\" label={{ value: \"+ σ\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ negativeStDevLineX } stroke=\"#C98BBE\" label={{ value: \"- σ\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n});\nDistributionChart.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst Stats = memo( function Stats ({ data }) {\n\tconst [ threshold, setThreshold ] = useState( 100 );\n\tconst sampleCount = _.size( data );\n\t\n\tconst differences = _.map( data, ({ actual, prediction, close, id }) => ({ \n\t\tactual: Number(( actual - close ).toFixed( 5 )),\n\t\tprediction: Number(( prediction - close ).toFixed( 5 )),\n\t\taccuracy: Number(( prediction - actual ).toFixed( 5 )),\n\t\tid, close,\n\t}));\n\t\n\tconst actuals = _.map( differences, \"actual\" );\n\tconst actualStDev = standardDeviation( actuals );\n\tconst threshStDev = threshold >= 0 ? actualStDev * threshold / 100 : actualStDev;\n\tconst actualsStDev = threshStDev;\n\tconst negActualsStDev = -1 * threshStDev;\n\n\tconst upAUpP = _.size( _.filter( differences, ({ actual, prediction }) => actual > actualsStDev && prediction > actualsStDev ));\n\tconst upAFlatP = _.size( _.filter( differences, ({ actual, prediction }) => actual > actualsStDev && prediction >= negActualsStDev && prediction <= actualsStDev ));\n\tconst upADownP = _.size( _.filter( differences, ({ actual, prediction }) => actual > actualsStDev && prediction < negActualsStDev ));\n\tconst upATotal = _.size( _.filter( differences, ({ actual }) => actual > actualsStDev ));\n\tconst upPTotal = _.size( _.filter( differences, ({ prediction }) => prediction > actualsStDev ));\n\t\n\tconst flatAUpP = _.size( _.filter( differences, ({ actual, prediction }) => actual >= negActualsStDev && actual <= actualsStDev && prediction > actualsStDev ));\n\tconst flatAFlatP = _.size( _.filter( differences, ({ actual, prediction }) => actual >= negActualsStDev && actual <= actualsStDev && prediction >= negActualsStDev && prediction <= actualsStDev ));\n\tconst flatADownP = _.size( _.filter( differences, ({ actual, prediction }) => actual >= negActualsStDev && actual <= actualsStDev && prediction < negActualsStDev ));\n\tconst flatATotal = _.size( _.filter( differences, ({ actual }) => actual >= negActualsStDev && actual <= actualsStDev ));\n\tconst flatPTotal = _.size( _.filter( differences, ({ prediction }) => prediction >= negActualsStDev && prediction <= actualsStDev ));\n\t\n\tconst downAUpP = _.size( _.filter( differences, ({ actual, prediction }) => actual < negActualsStDev && prediction > actualsStDev ));\n\tconst downAFlatP = _.size( _.filter( differences, ({ actual, prediction }) => actual < negActualsStDev && prediction >= negActualsStDev && prediction <= actualsStDev ));\n\tconst downADownP = _.size( _.filter( differences, ({ actual, prediction }) => actual < negActualsStDev && prediction < negActualsStDev ));\n\tconst downATotal = _.size( _.filter( differences, ({ actual }) => actual < negActualsStDev ));\n\tconst downPTotal = _.size( _.filter( differences, ({ prediction }) => prediction < negActualsStDev ));\n\n\tconst accuracy = _.map( differences, \"accuracy\" );\n\tconst accuracyMean = mean( accuracy );\n\tconst accuracyStandardDev = standardDeviation( accuracy );\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Basic Stats</h3>\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Number of Samples:</td>\n\t\t\t\t\t\t<td>{ sampleCount }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Accuracy ( Prediction minus Actual ) mean:</td>\n\t\t\t\t\t\t<td>{ ( accuracyMean ).toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Accuracy Standard Deviation:</td>\n\t\t\t\t\t\t<td>{ ( accuracyStandardDev ).toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<br />\n\t\t\t<div className=\"options\">\n\t\t\t\t<div>\n\t\t\t\t\t<p>Set difference threshold percent:</p>\n\t\t\t\t\t<input type=\"number\" onChange={ e => setThreshold( Number( e.target.value ))} value={ threshold } min={ 0 } />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Actual minus Close - Standard Dev:</td>\n\t\t\t\t\t\t<td>{ actualStDev.toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Actual minus Close Threshold:</td>\n\t\t\t\t\t\t<td>{ threshStDev.toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<br />\n\t\t\t<table className=\"comparison-table\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t<th>Prediction Up</th>\n\t\t\t\t\t\t<th>Prediction Flat</th>\n\t\t\t\t\t\t<th>Prediction Down</th>\n\t\t\t\t\t\t<th>Total</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Actual Up</th>\n\t\t\t\t\t\t<td>{ upAUpP } / { ( upAUpP / upPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ upAFlatP } / { ( upAFlatP / flatPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ upADownP } / { ( upADownP / downPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ upATotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Actual Flat</th>\n\t\t\t\t\t\t<td>{ flatAUpP } / { ( flatAUpP / upPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ flatAFlatP } / { ( flatAFlatP / flatPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ flatADownP } / { ( flatADownP / downPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ flatATotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Actual Down</th>\n\t\t\t\t\t\t<td>{ downAUpP } / { ( downAUpP / upPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ downAFlatP } / { ( downAFlatP / flatPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ downADownP } / { ( downADownP / downPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ downATotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Total</th>\n\t\t\t\t\t\t<td>{ upPTotal }</td>\n\t\t\t\t\t\t<td>{ flatPTotal }</td>\n\t\t\t\t\t\t<td>{ downPTotal }</td>\n\t\t\t\t\t\t<td>{ upATotal + flatATotal + downATotal } / { upPTotal + flatPTotal + downPTotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<p>% are of number of predictions per the actual, so accuracy in that actual direction</p>\n\t\t</>\n\t);\n});\nStats.propTypes = {\n\tdata: PropTypes.array,\n};","\nimport React, { memo } from \"react\";\nimport PropTypes from \"proptypes\";\nimport _ from \"lodash\";\nimport { ResponsiveContainer, ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, ReferenceLine } from \"recharts\";\nimport { min, max, mean, standardDeviation } from \"simple-statistics\";\n\nexport default function Change ({ data }) {    \n\treturn (\n\t\t<div className=\"charts change\">\n\t\t\t<hr />\n\t\t\t<div className=\"stats\">\n\t\t\t\t<Stats data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"distribution\">\n\t\t\t\t<DistributionChart data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"scatter\">\n\t\t\t\t<DotChart data={ data } />\n\t\t\t</div>\n\t\t</div> \n\t);\n}\nChange.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst DotChart = memo( function DotChart ({ data }) {\n\tconst graphData = _.map( data, ({ actual, prediction }) => ({ actual: Number(( actual ).toFixed( 4 ) * 100 ), prediction: Number(( prediction ).toFixed( 4 ) * 100 ), z: 1 }));\n\tconst actualsStDev = standardDeviation( _.map( graphData, \"actual\" ));\n\tconst negActualsStDev = actualsStDev * -1;\n\n\tconst largestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = Math.abs( _.get( current, \"actual\" ));\n\t\tconst prediction = Math.abs( _.get( current, \"prediction\" ));\n\t\tif ( actual > prediction ) return actual > total ? actual : total;\n\t\treturn prediction > total ? prediction: total;\n\t}, -Infinity );\n\tconst domain =  [ -1 * Math.ceil( largestVal * 2 ) / 2, 1 * Math.ceil( largestVal * 2 ) / 2 ];\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Predictions vs Actuals scatter</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 50, bottom: 20, right: 70, left: 20 }}>\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<XAxis type=\"number\" dataKey=\"actual\" name=\"actual\" domain={ domain } label={{ value: \"Actual Change (cents)\", position: \"bottom\", offset: 0 }} />\n\t\t\t\t\t<YAxis type=\"number\" dataKey=\"prediction\" name=\"prediction\" domain={ domain } label={{ value: \"Predicted Change (cents)\", position: \"left\", angle: -90, offset: 0 }} />\n\t\t\t\t\t<ZAxis dataKey=\"z\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n\t\t\t\t\t<Scatter data={ graphData } fill=\"#82ca9d\" shape=\"circle\" line={{ stroke: \"#e16162\", strokeWidth: 1 }} lineType=\"fitting\" />\n\t\t\t\t\t<ReferenceLine x={ actualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"+ σ\", position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ negActualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"- σ\", position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine y={ actualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"+ σ\", position: \"insideTopLeft\" }} />\n\t\t\t\t\t<ReferenceLine y={ negActualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"- σ\", position: \"insideTopLeft\" }} /> \n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n});\nDotChart.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst DistributionChart = memo( function DistributionChart ({ data }) {\n\tconst numberOfIntervals = 50;\n    \n\tconst variations = _.map( data, ({ actual, prediction }) => Number(( actual - prediction ).toFixed( 4 ) * 100 ));\n\tconst range = 2 * max([ 0 - min( variations ), max( variations ) ]);\n\tconst intervalLength = range / numberOfIntervals; \n\tconst sampleMean = mean( variations );\n\tconst actualsStDev = standardDeviation( variations );\n\tconst start = range / 2 * -1;\n\n\tconst graphData = _.map( _.range( 0, numberOfIntervals + 1 ), i => {\n\t\tconst bottom = Number(( start + intervalLength * ( i - 0.5 )).toFixed( 5 ));\n\t\tconst middle = Number(( start + intervalLength * ( i )).toFixed( 5 ));\n\t\tconst top = Number(( start + intervalLength * ( i + 0.5 )).toFixed( 5 )); \n\t\tconst matchedVariations = _.filter( variations, variation => variation > bottom && variation <= top );\n\t\treturn { name: middle, value: _.size( matchedVariations ), size: 0 };\n\t});\n    \n\tconst positiveStDevLineX = sampleMean + actualsStDev;\n\tconst negativeStDevLineX = sampleMean - actualsStDev;\n\tconsole.log( negativeStDevLineX, positiveStDevLineX );\n        \n\treturn (\n\t\t<>\n\t\t\t<h3>Variations distribution</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 20, bottom: 20, left: -25 }} >\n\t\t\t\t\t<XAxis dataKey=\"name\" />\n\t\t\t\t\t<YAxis dataKey=\"value\" />\n\t\t\t\t\t<ZAxis dataKey=\"size\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }}/>\n\t\t\t\t\t<Scatter data={ graphData } line={{ stroke: \"#82ca9d\", strokeWidth: 1 }} stroke=\"#82ca9d\" />\n\t\t\t\t\t<ReferenceLine x={ sampleMean } stroke=\"#C98BBE\" label={{ value: \"Mean\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ positiveStDevLineX } stroke=\"#C98BBE\" label={{ value: \"+ σ\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ negativeStDevLineX } stroke=\"#C98BBE\" label={{ value: \"- σ\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n});\nDistributionChart.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst Stats = memo( function Stats ({ data }) {\n\tconst sampleCount = _.size( data );\n    \n\tconst actuals = _.map( data, \"actual\" );\n\tconst actualsMean = mean( actuals );\n\tconst actualsStDev = standardDeviation( actuals ) - actualsMean;\n\tconst negActualsStDev = actualsMean - actualsStDev;\n        \n\tconst upAUpP = _.size( _.filter( data, ({ actual, prediction }) => actual > actualsStDev && prediction > actualsStDev ));\n\tconst upAFlatP = _.size( _.filter( data, ({ actual, prediction }) => actual > actualsStDev && prediction >= negActualsStDev && prediction <= actualsStDev ));\n\tconst upADownP = _.size( _.filter( data, ({ actual, prediction }) => actual > actualsStDev && prediction < negActualsStDev ));\n\tconst upATotal = _.size( _.filter( data, ({ actual }) => actual > actualsStDev ));\n\tconst upPTotal = _.size( _.filter( data, ({ prediction }) => prediction > actualsStDev ));\n    \n\tconst flatAUpP = _.size( _.filter( data, ({ actual, prediction }) => actual >= negActualsStDev && actual <= actualsStDev && prediction > actualsStDev ));\n\tconst flatAFlatP = _.size( _.filter( data, ({ actual, prediction }) => actual >= negActualsStDev && actual <= actualsStDev && prediction >= negActualsStDev && prediction <= actualsStDev ));\n\tconst flatADownP = _.size( _.filter( data, ({ actual, prediction }) => actual >= negActualsStDev && actual <= actualsStDev && prediction < negActualsStDev ));\n\tconst flatATotal = _.size( _.filter( data, ({ actual }) => actual >= negActualsStDev && actual <= actualsStDev ));\n\tconst flatPTotal = _.size( _.filter( data, ({ prediction }) => prediction >= negActualsStDev && prediction <= actualsStDev ));\n    \n\tconst downAUpP = _.size( _.filter( data, ({ actual, prediction }) => actual < negActualsStDev && prediction > actualsStDev ));\n\tconst downAFlatP = _.size( _.filter( data, ({ actual, prediction }) => actual < negActualsStDev && prediction >= negActualsStDev && prediction <= actualsStDev ));\n\tconst downADownP = _.size( _.filter( data, ({ actual, prediction }) => actual < negActualsStDev && prediction < negActualsStDev ));\n\tconst downATotal = _.size( _.filter( data, ({ actual }) => actual < negActualsStDev ));\n\tconst downPTotal = _.size( _.filter( data, ({ prediction }) => prediction < negActualsStDev ));\n\n\tconst variations = _.map( data, ({ actual, prediction }) => Number(( actual - prediction ).toFixed( 4 )));\n\tconst sampleMean = mean( variations );\n\tconst sampleStandardDev = standardDeviation( variations );\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Basic Stats</h3>\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Number of Samples:</td>\n\t\t\t\t\t\t<td>{ sampleCount }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Sample mean:</td>\n\t\t\t\t\t\t<td>{ ( sampleMean ).toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Sample Standard Deviation:</td>\n\t\t\t\t\t\t<td>{ ( sampleStandardDev ).toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<br />\n\t\t\t<table className=\"comparison-table\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t<th>Prediction Up</th>\n\t\t\t\t\t\t<th>Prediction Flat</th>\n\t\t\t\t\t\t<th>Prediction Down</th>\n\t\t\t\t\t\t<th>Total</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Actual Up</th>\n\t\t\t\t\t\t<td>{ upAUpP } / { ( upAUpP / upPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ upAFlatP } / { ( upAFlatP / flatPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ upADownP } / { ( upADownP / downPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ upATotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Actual Flat</th>\n\t\t\t\t\t\t<td>{ flatAUpP } / { ( flatAUpP / upPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ flatAFlatP } / { ( flatAFlatP / flatPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ flatADownP } / { ( flatADownP / downPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ flatATotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Actual Down</th>\n\t\t\t\t\t\t<td>{ downAUpP } / { ( downAUpP / upPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ downAFlatP } / { ( downAFlatP / flatPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ downADownP } / { ( downADownP / downPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ downATotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Total</th>\n\t\t\t\t\t\t<td>{ upPTotal }</td>\n\t\t\t\t\t\t<td>{ flatPTotal }</td>\n\t\t\t\t\t\t<td>{ downPTotal }</td>\n\t\t\t\t\t\t<td>{ upATotal + flatATotal + downATotal } / { upPTotal + flatPTotal + downPTotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<p>% are of number of predictions per the actual, so accuracy in that actual direction</p>\n\t\t</>\n\t);\n});\nStats.propTypes = {\n\tdata: PropTypes.array,\n};\n","\nimport React, { memo } from \"react\";\nimport PropTypes from \"proptypes\";\nimport _ from \"lodash\";\nimport { ResponsiveContainer, ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, ReferenceLine } from \"recharts\";\nimport { min, max, mean, standardDeviation } from \"simple-statistics\";\n\nexport default function Absolute ({ data }) {    \n\treturn (\n\t\t<div className=\"charts absolute\">\n\t\t\t<hr />\n\t\t\t<div className=\"stats\">\n\t\t\t\t<Stats data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"distribution\">\n\t\t\t\t<DistributionChart data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"scatter\">\n\t\t\t\t<DotChartDifference data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"scatter\">\n\t\t\t\t<DotChartPrice data={ data } />\n\t\t\t</div>\n\t\t</div> \n\n\t);\n}\nAbsolute.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst DotChartPrice = memo( function DotChartPrice ({ data }) {\n\tconst graphData = _.map( data, ({ actual, prediction }) => ({ actual: Number(( actual ).toFixed( 4 )), prediction: Number(( prediction ).toFixed( 4 )), z: 1 }));\n\n\tconst largestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual > prediction ) return actual > total ? actual : total;\n\t\treturn prediction > total ? prediction: total;\n\t}, -Infinity );\n\tconst smallestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual < prediction ) return actual < total ? actual : total;\n\t\treturn prediction < total ? prediction: total;\n\t}, Infinity );\n\tconst domain =  [ smallestVal, largestVal ];\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Price distribution scatter</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 50, bottom: 20, right: 70, left: 20 }}>\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<XAxis type=\"number\" dataKey=\"actual\" name=\"actual\" domain={ domain } label={{ value: \"Actual Change (cents)\", position: \"bottom\", offset: 0 }} />\n\t\t\t\t\t<YAxis type=\"number\" dataKey=\"prediction\" name=\"prediction\" domain={ domain } label={{ value: \"Predicted Change (cents)\", position: \"left\", angle: -90, offset: 0 }} />\n\t\t\t\t\t<ZAxis dataKey=\"z\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n\t\t\t\t\t<Scatter data={ graphData } fill=\"#82ca9d\" shape=\"circle\" line={{ stroke: \"#e16162\", strokeWidth: 1 }} lineType=\"fitting\" />\n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n});\nDotChartPrice.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst DotChartDifference = memo( function DotChartDifference ({ data }) {\n\tconst graphData = _.map( data, ({ actual, prediction, close }) => ({ actual: Number(( actual - close ).toFixed( 4 )), prediction: Number(( prediction - close ).toFixed( 4 )), z: 1 }));\n\tconst actualsStDev = standardDeviation( _.map( graphData, \"actual\" ));\n\tconst negActualsStDev = actualsStDev * -1;\n\t\n\tconst largestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual > prediction ) return actual > total ? actual : total;\n\t\treturn prediction > total ? prediction: total;\n\t}, -Infinity );\n\tconst smallestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual < prediction ) return actual < total ? actual : total;\n\t\treturn prediction < total ? prediction: total;\n\t}, Infinity );\n\tconst domain =  [ smallestVal, largestVal ];\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Prediction difference distribution scatter</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 50, bottom: 20, right: 70, left: 20 }}>\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<XAxis type=\"number\" dataKey=\"actual\" name=\"actual\" domain={ domain } label={{ value: \"Actual Change (cents)\", position: \"bottom\", offset: 0 }} />\n\t\t\t\t\t<YAxis type=\"number\" dataKey=\"prediction\" name=\"prediction\" domain={ domain } label={{ value: \"Predicted Change (cents)\", position: \"left\", angle: -90, offset: 0 }} />\n\t\t\t\t\t<ZAxis dataKey=\"z\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n\t\t\t\t\t<Scatter data={ graphData } fill=\"#82ca9d\" shape=\"circle\" line={{ stroke: \"#e16162\", strokeWidth: 2 }} lineType=\"fitting\" />\n\t\t\t\t\t<ReferenceLine x={ actualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"+ σ\", position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ negActualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"- σ\", position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine y={ actualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"+ σ\", position: \"insideTopLeft\" }} />\n\t\t\t\t\t<ReferenceLine y={ negActualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"- σ\", position: \"insideTopLeft\" }} /> \n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n});\nDotChartDifference.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst DistributionChart = memo( function DistributionChart ({ data }) {\n\tconst numberOfIntervals = 50;\n\t\n\tconst variations = _.map( data, ({ actual, prediction }) => Number(( prediction - actual ).toFixed( 4 )));\n\tconst range = 2 * max([ 0 - min( variations ), max( variations ) ]);\n\tconst intervalLength = range / numberOfIntervals; \n\tconst sampleMean = mean( variations );\n\tconst actualsStDev = standardDeviation( variations );\n\tconst start = range / 2 * -1;\n\n\tconst graphData = _.map( _.range( 0, numberOfIntervals + 1 ), i => {\n\t\tconst bottom = Number(( start + intervalLength * ( i - 0.5 )).toFixed( 5 ));\n\t\tconst middle = Number(( start + intervalLength * ( i )).toFixed( 5 ));\n\t\tconst top = Number(( start + intervalLength * ( i + 0.5 )).toFixed( 5 )); \n\t\tconst matchedVariations = _.filter( variations, variation => variation > bottom && variation <= top );\n\t\treturn { name: middle, value: _.size( matchedVariations ), size: 0 };\n\t});\n\t\n\tconst positiveStDevLineX = sampleMean + actualsStDev;\n\tconst negativeStDevLineX = sampleMean - actualsStDev;\n\t\t\n\treturn (\n\t\t<>\n\t\t\t<h3>Variations distribution</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 20, bottom: 20, left: -25 }} >\n\t\t\t\t\t<XAxis dataKey=\"name\" />\n\t\t\t\t\t<YAxis dataKey=\"value\" />\n\t\t\t\t\t<ZAxis dataKey=\"size\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }}/>\n\t\t\t\t\t<Scatter data={ graphData } line={{ stroke: \"#82ca9d\", strokeWidth: 1 }} stroke=\"#82ca9d\" />\n\t\t\t\t\t<ReferenceLine x={ sampleMean } stroke=\"#C98BBE\" label={{ value: \"Mean\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ positiveStDevLineX } stroke=\"#C98BBE\" label={{ value: \"+ σ\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ negativeStDevLineX } stroke=\"#C98BBE\" label={{ value: \"- σ\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n});\nDistributionChart.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst Stats = memo( function Stats ({ data }) {\n\t// const [ threshold, setThreshold ] = useState( 100 );\n\tconst sampleCount = _.size( data );\n\t\n\tconst differences = _.map( data, ({ actual, prediction, close }) => ({ \n\t\tactual: Number(( actual - close ).toFixed( 5 )),\n\t\tprediction: Number(( prediction - close ).toFixed( 5 )),\n\t\taccuracy: Number(( prediction - actual ).toFixed( 5 )),\n\t}));\n\t\n\t// const actuals = _.map( differences, \"actual\" );\n\t// const actualStDev = standardDeviation( actuals );\n\t// const threshStDev = threshold >= 0 ? actualStDev * threshold / 100 : actualStDev;\n\t// const actualsStDev = threshStDev;\n\t// const negActualsStDev = -1 * threshStDev;\n\n\t// const upAUpP = _.size( _.filter( differences, ({ actual, prediction }) => actual > actualsStDev && prediction > actualsStDev ));\n\t// const upAFlatP = _.size( _.filter( differences, ({ actual, prediction }) => actual > actualsStDev && prediction >= negActualsStDev && prediction <= actualsStDev ));\n\t// const upADownP = _.size( _.filter( differences, ({ actual, prediction }) => actual > actualsStDev && prediction < negActualsStDev ));\n\t// const upATotal = _.size( _.filter( differences, ({ actual }) => actual > actualsStDev ));\n\t// const upPTotal = _.size( _.filter( differences, ({ prediction }) => prediction > actualsStDev ));\n\t\n\t// const flatAUpP = _.size( _.filter( differences, ({ actual, prediction }) => actual >= negActualsStDev && actual <= actualsStDev && prediction > actualsStDev ));\n\t// const flatAFlatP = _.size( _.filter( differences, ({ actual, prediction }) => actual >= negActualsStDev && actual <= actualsStDev && prediction >= negActualsStDev && prediction <= actualsStDev ));\n\t// const flatADownP = _.size( _.filter( differences, ({ actual, prediction }) => actual >= negActualsStDev && actual <= actualsStDev && prediction < negActualsStDev ));\n\t// const flatATotal = _.size( _.filter( differences, ({ actual }) => actual >= negActualsStDev && actual <= actualsStDev ));\n\t// const flatPTotal = _.size( _.filter( differences, ({ prediction }) => prediction >= negActualsStDev && prediction <= actualsStDev ));\n\t\n\t// const downAUpP = _.size( _.filter( differences, ({ actual, prediction }) => actual < negActualsStDev && prediction > actualsStDev ));\n\t// const downAFlatP = _.size( _.filter( differences, ({ actual, prediction }) => actual < negActualsStDev && prediction >= negActualsStDev && prediction <= actualsStDev ));\n\t// const downADownP = _.size( _.filter( differences, ({ actual, prediction }) => actual < negActualsStDev && prediction < negActualsStDev ));\n\t// const downATotal = _.size( _.filter( differences, ({ actual }) => actual < negActualsStDev ));\n\t// const downPTotal = _.size( _.filter( differences, ({ prediction }) => prediction < negActualsStDev ));\n\n\tconst accuracy = _.map( differences, \"accuracy\" );\n\tconst accuracyMean = mean( accuracy );\n\tconst accuracyStandardDev = standardDeviation( accuracy );\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Basic Stats</h3>\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Number of Samples:</td>\n\t\t\t\t\t\t<td>{ sampleCount }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Accuracy ( Prediction minus Actual ) mean:</td>\n\t\t\t\t\t\t<td>{ ( accuracyMean ).toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Accuracy Standard Deviation:</td>\n\t\t\t\t\t\t<td>{ ( accuracyStandardDev ).toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t{/* <br />\n\t\t\t<div className=\"options\">\n\t\t\t\t<div>\n\t\t\t\t\t<p>Set difference threshold percent:</p>\n\t\t\t\t\t<input type=\"number\" onChange={ e => setThreshold( Number( e.target.value ))} value={ threshold } min={ 0 } />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Actual minus Close - Standard Dev:</td>\n\t\t\t\t\t\t<td>{ actualStDev.toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Actual minus Close Threshold:</td>\n\t\t\t\t\t\t<td>{ threshStDev.toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<br />\n\t\t\t<table className=\"comparison-table\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t<th>Prediction Up</th>\n\t\t\t\t\t\t<th>Prediction Flat</th>\n\t\t\t\t\t\t<th>Prediction Down</th>\n\t\t\t\t\t\t<th>Total</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Actual Up</th>\n\t\t\t\t\t\t<td>{ upAUpP } / { ( upAUpP / upPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ upAFlatP } / { ( upAFlatP / flatPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ upADownP } / { ( upADownP / downPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ upATotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Actual Flat</th>\n\t\t\t\t\t\t<td>{ flatAUpP } / { ( flatAUpP / upPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ flatAFlatP } / { ( flatAFlatP / flatPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ flatADownP } / { ( flatADownP / downPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ flatATotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Actual Down</th>\n\t\t\t\t\t\t<td>{ downAUpP } / { ( downAUpP / upPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ downAFlatP } / { ( downAFlatP / flatPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ downADownP } / { ( downADownP / downPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ downATotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Total</th>\n\t\t\t\t\t\t<td>{ upPTotal }</td>\n\t\t\t\t\t\t<td>{ flatPTotal }</td>\n\t\t\t\t\t\t<td>{ downPTotal }</td>\n\t\t\t\t\t\t<td>{ upATotal + flatATotal + downATotal } / { upPTotal + flatPTotal + downPTotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<p>% are of number of predictions per the actual, so accuracy in that actual direction</p> */}\n\t\t</>\n\t);\n});\nStats.propTypes = {\n\tdata: PropTypes.array,\n};\n","\nimport React, { useEffect, useState } from \"react\";\nimport { useQuery, useLazyQuery } from \"@apollo/react-hooks\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner , faCheck, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport _ from \"lodash\";\nimport gql from \"graphql-tag\";\nimport Absolute from \"./Views/Absolute\";\nimport Change from \"./Views/Change\";\nimport Highs from \"./Views/Highs\";\n\nconst GET_VERSIONS = gql`\nquery GetVersions {\n    versions ( order_by: { id: asc } ) { id prediction_type instrument depth granularity }\n}\n`;\n\nconst GET_PREDICTIONS = gql`\nquery GetPredictions ( $version: Int!, $was_back_predicted: [Boolean!], $start_time: timestamptz! ) {\n    predictions ( where: { \n        prediction: { _is_null: false }, \n        actual: { _is_null: false }, \n        close: { _is_null: false }, \n        _version: { _eq: $version }, \n        was_back_predicted: { _in: $was_back_predicted },\n        time: { _gte: $start_time }\n    }) {\n        actual id time\n        prediction\n        _version\n        close\n    }\n}`;\n\nexport default function Home () {\n\tconst [ version, setVersion ] = useState({});\n\tconst [ includeBackPredicted, setIncludeBackPredicted ] = useState( true );\n\tconst [ daysBack, setDaysBack ] = useState( 0 );\n\tconst start_time = daysBack === 0 ? new Date( 0 ).toISOString() : new Date( Date.now() - ( 1000 * 60 * 60 * 24 * daysBack )).toISOString();\n    \n\tconst { data: versionsData } = useQuery( GET_VERSIONS );\n\tconst [ getPredictions, { data, loading }] = useLazyQuery( GET_PREDICTIONS );\n\n\tconst versions = _.get( versionsData, \"versions\" );\n\tconst versionId = _.get( version, \"id\" );\n\tconst predictions = _.get( data, \"predictions\" );\n\tconst prediction_type = _.get( version, \"prediction_type\" );\n\tconst instrument = _.get( version, \"instrument\" );\n\tconst granularity = _.get( version, \"granularity\" );\n\tconst depth = _.get( version, \"depth\" );\n\n\t// eslint-disable-next-line\n\tuseEffect(() => { if ( _.isEmpty( version ) && !_.isEmpty( versions )) setVersion( _.last( versions )); }, [ versions ]);\n\t// eslint-disable-next-line\n\tuseEffect(() => { if ( versionId ) getPredictions({ variables: { version: versionId, was_back_predicted: includeBackPredicted ? [ true, false ] : [ false ], start_time }}); }, [ version, includeBackPredicted, daysBack ]);\n        \n\treturn (\n\t\t<div className=\"body\">\n\t\t\t<div className=\"header\">\n\t\t\t\t<h1>Visualisation and Stats analysis of my ML model</h1>\n\t\t\t\t<p>All predictions pulled for my model, visualised and analysed.</p>\n\t\t\t</div>\n\t\t\t<div className=\"options\">\n\t\t\t\t<div>\n\t\t\t\t\t<p>Select Version:</p>\n\t\t\t\t\t<select value={ versionId } onChange={ e => setVersion( _.find( versions, [ \"id\", Number( e.target.value ) ])) }>\n\t\t\t\t\t\t{ !_.isEmpty( versions ) && _.map( versions, ({ id }) => <option key={ id } value={ id }>{ id }</option> ) }\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div onClick={ () => setIncludeBackPredicted( !includeBackPredicted ) }>\n\t\t\t\t\t<p>Include back-predicted results</p>\n\t\t\t\t\t{ includeBackPredicted ? <FontAwesomeIcon icon={ faCheck } /> : <FontAwesomeIcon icon={ faTimes } className=\"unchecked\" /> }\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<p>How many days back (0 = all)?</p>\n\t\t\t\t\t<input type=\"number\" onChange={ e => setDaysBack( Number( e.target.value ))} value={ daysBack } />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"version-info\">\n\t\t\t\t<p>Instrument: <span>{ instrument }</span></p>\n\t\t\t\t<p>Granularity: <span>{ granularity }</span></p>\n\t\t\t\t<p>Depth: <span>{ depth }</span></p>\n\t\t\t</div>\n\t\t\t<br />\n\t\t\t{ ( loading || !version ) ? \n\t\t\t\t<div className=\"loader\">\n\t\t\t\t\t<FontAwesomeIcon icon={ faSpinner } spin size=\"3x\" />\n\t\t\t\t</div>\n\t\t\t\t:\n\t\t\t\t<>\n\t\t\t\t\t{ !_.isEmpty( predictions ) ? \n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{ prediction_type === \"absolute\" && <Absolute data={ predictions } /> }\n\t\t\t\t\t\t\t{ prediction_type === \"change\" && <Change data={ predictions } /> }\n\t\t\t\t\t\t\t{ prediction_type === \"highs\" && <Highs data={ predictions } /> }\n\t\t\t\t\t\t</>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<p>Nothing to display - change a filter!</p>\n\t\t\t\t\t}\n\t\t\t\t</>\n\t\t\t}\n\t\t</div>\n\t);\n}\n","\nimport React from \"react\";\nimport Home from \"./Home\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\n\n\nexport default function App () {\n\tconst client = new ApolloClient({\n\t\turi: \"https://boiling-ridge-24261.herokuapp.com/v1/graphql\",\n\t});\n\n\treturn (\n\t\t<ApolloProvider client={ client }>\n\t\t\t<Home />\n\t\t</ApolloProvider>\n\t);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById( \"root\" ),\n);\n"],"sourceRoot":""}