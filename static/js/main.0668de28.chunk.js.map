{"version":3,"sources":["Views/Absolute.js","Views/Change.js","Home.js","App.js","webpack:///./src/index.js?b635"],"names":["Absolute","data","className","DotChartPrice","memo","graphData","_","map","actual","prediction","Number","toFixed","z","largestVal","reduce","total","current","get","Infinity","domain","margin","top","bottom","right","left","type","dataKey","name","label","value","position","offset","angle","range","cursor","strokeDasharray","fill","shape","line","stroke","strokeWidth","lineType","DotChartDifference","close","actualsStDev","standardDeviation","negActualsStDev","x","y","DistributionChart","variations","max","min","intervalLength","sampleMean","mean","start","numberOfIntervals","i","middle","matchedVariations","filter","variation","size","positiveStDevLineX","negativeStDevLineX","orientation","Stats","useState","threshold","setThreshold","sampleCount","differences","actuals","actualStDev","threshStDev","upAUpP","upAFlatP","upADownP","upATotal","upPTotal","flatAUpP","flatAFlatP","flatADownP","flatATotal","flatPTotal","downAUpP","downAFlatP","downADownP","downATotal","downPTotal","sampleStandardDev","onChange","e","target","Change","DotChart","Math","abs","ceil","console","log","actualsMean","GET_VERSIONS","gql","GET_PREDICTIONS","Home","instrument","setInstrument","version","setVersion","includeBackPredicted","setIncludeBackPredicted","daysBack","setDaysBack","start_time","Date","toISOString","now","versionsData","useQuery","useLazyQuery","getPredictions","loading","useEffect","variables","was_back_predicted","predictions","versions","isEmpty","prediction_type","find","instruments","uniq","first","filteredPredictions","key","onClick","icon","faCheck","faTimes","faSpinner","spin","App","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0668de28.chunk.js","sourcesContent":["\nimport React, { memo, useState } from \"react\";\nimport PropTypes from \"proptypes\";\nimport _ from \"lodash\";\nimport { ResponsiveContainer, ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, ReferenceLine } from \"recharts\";\nimport { min, max, mean, standardDeviation } from \"simple-statistics\";\n\nexport default function Absolute ({ data }) {    \n\treturn (\n\t\t<div className=\"charts absolute\">\n\t\t\t<hr />\n\t\t\t<div className=\"stats\">\n\t\t\t\t<Stats data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"distribution\">\n\t\t\t\t<DistributionChart data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"scatter\">\n\t\t\t\t<DotChartDifference data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"scatter\">\n\t\t\t\t<DotChartPrice data={ data } />\n\t\t\t</div>\n\t\t</div> \n\n\t);\n}\nAbsolute.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst DotChartPrice = memo( function DotChartPrice ({ data }) {\n\tconst graphData = _.map( data, ({ actual, prediction }) => ({ actual: Number(( actual ).toFixed( 4 )), prediction: Number(( prediction ).toFixed( 4 )), z: 1 }));\n\n\tconst largestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual > prediction ) return actual > total ? actual : total;\n\t\treturn prediction > total ? prediction: total;\n\t}, -Infinity );\n\tconst smallestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual < prediction ) return actual < total ? actual : total;\n\t\treturn prediction < total ? prediction: total;\n\t}, Infinity );\n\tconst domain =  [ smallestVal, largestVal ];\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Price distribution scatter</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 50, bottom: 20, right: 70, left: 20 }}>\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<XAxis type=\"number\" dataKey=\"actual\" name=\"actual\" domain={ domain } label={{ value: \"Actual Change (cents)\", position: \"bottom\", offset: 0 }} />\n\t\t\t\t\t<YAxis type=\"number\" dataKey=\"prediction\" name=\"prediction\" domain={ domain } label={{ value: \"Predicted Change (cents)\", position: \"left\", angle: -90, offset: 0 }} />\n\t\t\t\t\t<ZAxis dataKey=\"z\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n\t\t\t\t\t<Scatter data={ graphData } fill=\"#82ca9d\" shape=\"circle\" line={{ stroke: \"#e16162\", strokeWidth: 1 }} lineType=\"fitting\" />\n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n});\nDotChartPrice.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst DotChartDifference = memo( function DotChartDifference ({ data }) {\n\tconst graphData = _.map( data, ({ actual, prediction, close }) => ({ actual: Number(( actual - close ).toFixed( 4 )), prediction: Number(( prediction - close ).toFixed( 4 )), z: 1 }));\n\tconst actualsStDev = standardDeviation( _.map( graphData, \"actual\" ));\n\tconst negActualsStDev = actualsStDev * -1;\n\t\n\tconst largestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual > prediction ) return actual > total ? actual : total;\n\t\treturn prediction > total ? prediction: total;\n\t}, -Infinity );\n\tconst smallestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual < prediction ) return actual < total ? actual : total;\n\t\treturn prediction < total ? prediction: total;\n\t}, Infinity );\n\tconst domain =  [ smallestVal, largestVal ];\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Prediction difference distribution scatter</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 50, bottom: 20, right: 70, left: 20 }}>\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<XAxis type=\"number\" dataKey=\"actual\" name=\"actual\" domain={ domain } label={{ value: \"Actual Change (cents)\", position: \"bottom\", offset: 0 }} />\n\t\t\t\t\t<YAxis type=\"number\" dataKey=\"prediction\" name=\"prediction\" domain={ domain } label={{ value: \"Predicted Change (cents)\", position: \"left\", angle: -90, offset: 0 }} />\n\t\t\t\t\t<ZAxis dataKey=\"z\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n\t\t\t\t\t<Scatter data={ graphData } fill=\"#82ca9d\" shape=\"circle\" line={{ stroke: \"#e16162\", strokeWidth: 2 }} lineType=\"fitting\" />\n\t\t\t\t\t<ReferenceLine x={ actualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"+ σ\", position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ negActualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"- σ\", position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine y={ actualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"+ σ\", position: \"insideTopLeft\" }} />\n\t\t\t\t\t<ReferenceLine y={ negActualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"- σ\", position: \"insideTopLeft\" }} /> \n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n});\nDotChartDifference.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst DistributionChart = memo( function DistributionChart ({ data }) {\n\tconst numberOfIntervals = 50;\n\t\n\tconst variations = _.map( data, ({ actual, prediction }) => Number(( actual - prediction ).toFixed( 4 )));\n\tconst range = 2 * max([ 0 - min( variations ), max( variations ) ]);\n\tconst intervalLength = range / numberOfIntervals; \n\tconst sampleMean = mean( variations );\n\tconst actualsStDev = standardDeviation( variations );\n\tconst start = range / 2 * -1;\n\n\tconst graphData = _.map( _.range( 0, numberOfIntervals + 1 ), i => {\n\t\tconst bottom = Number(( start + intervalLength * ( i - 0.5 )).toFixed( 5 ));\n\t\tconst middle = Number(( start + intervalLength * ( i )).toFixed( 5 ));\n\t\tconst top = Number(( start + intervalLength * ( i + 0.5 )).toFixed( 5 )); \n\t\tconst matchedVariations = _.filter( variations, variation => variation > bottom && variation <= top );\n\t\treturn { name: middle, value: _.size( matchedVariations ), size: 0 };\n\t});\n\t\n\tconst positiveStDevLineX = sampleMean + actualsStDev;\n\tconst negativeStDevLineX = sampleMean - actualsStDev;\n\t\t\n\treturn (\n\t\t<>\n\t\t\t<h3>Variations distribution</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 20, bottom: 20, left: -25 }} >\n\t\t\t\t\t<XAxis dataKey=\"name\" />\n\t\t\t\t\t<YAxis dataKey=\"value\" />\n\t\t\t\t\t<ZAxis dataKey=\"size\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }}/>\n\t\t\t\t\t<Scatter data={ graphData } line={{ stroke: \"#82ca9d\", strokeWidth: 1 }} stroke=\"#82ca9d\" />\n\t\t\t\t\t<ReferenceLine x={ sampleMean } stroke=\"#C98BBE\" label={{ value: \"Mean\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ positiveStDevLineX } stroke=\"#C98BBE\" label={{ value: \"+ σ\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ negativeStDevLineX } stroke=\"#C98BBE\" label={{ value: \"- σ\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n});\nDistributionChart.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst Stats = memo( function Stats ({ data }) {\n\tconst [ threshold, setThreshold ] = useState( 10 );\n\tconst sampleCount = _.size( data );\n\t\n\tconst differences = _.map( data, ({ actual, prediction, close }) => ({ actual: Number(( actual - close ).toFixed( 4 )), prediction: Number(( prediction - close ).toFixed( 4 )) }));\n\t\n\tconst actuals = _.map( differences, \"actual\" );\n\tconst actualStDev = standardDeviation( actuals );\n\tconst threshStDev = threshold >= 0 ? actualStDev * threshold / 100 : actualStDev;\n\tconst actualsStDev = threshStDev;\n\tconst negActualsStDev = -1 * threshStDev;\n\n\tconst upAUpP = _.size( _.filter( differences, ({ actual, prediction }) => actual > actualsStDev && prediction > actualsStDev ));\n\tconst upAFlatP = _.size( _.filter( differences, ({ actual, prediction }) => actual > actualsStDev && prediction >= negActualsStDev && prediction <= actualsStDev ));\n\tconst upADownP = _.size( _.filter( differences, ({ actual, prediction }) => actual > actualsStDev && prediction < negActualsStDev ));\n\tconst upATotal = _.size( _.filter( differences, ({ actual }) => actual > actualsStDev ));\n\tconst upPTotal = _.size( _.filter( differences, ({ prediction }) => prediction > actualsStDev ));\n\t\n\tconst flatAUpP = _.size( _.filter( differences, ({ actual, prediction }) => actual >= negActualsStDev && actual <= actualsStDev && prediction > actualsStDev ));\n\tconst flatAFlatP = _.size( _.filter( differences, ({ actual, prediction }) => actual >= negActualsStDev && actual <= actualsStDev && prediction >= negActualsStDev && prediction <= actualsStDev ));\n\tconst flatADownP = _.size( _.filter( differences, ({ actual, prediction }) => actual >= negActualsStDev && actual <= actualsStDev && prediction < negActualsStDev ));\n\tconst flatATotal = _.size( _.filter( differences, ({ actual }) => actual >= negActualsStDev && actual <= actualsStDev ));\n\tconst flatPTotal = _.size( _.filter( differences, ({ prediction }) => prediction >= negActualsStDev && prediction <= actualsStDev ));\n\t\n\tconst downAUpP = _.size( _.filter( differences, ({ actual, prediction }) => actual < negActualsStDev && prediction > actualsStDev ));\n\tconst downAFlatP = _.size( _.filter( differences, ({ actual, prediction }) => actual < negActualsStDev && prediction >= negActualsStDev && prediction <= actualsStDev ));\n\tconst downADownP = _.size( _.filter( differences, ({ actual, prediction }) => actual < negActualsStDev && prediction < negActualsStDev ));\n\tconst downATotal = _.size( _.filter( differences, ({ actual }) => actual < negActualsStDev ));\n\tconst downPTotal = _.size( _.filter( differences, ({ prediction }) => prediction < negActualsStDev ));\n\n\tconst variations = _.map( differences, ({ actual, prediction }) => Number(( actual - prediction ).toFixed( 4 )));\n\tconst sampleMean = mean( variations );\n\tconst sampleStandardDev = standardDeviation( variations );\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Basic Stats</h3>\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Number of Samples:</td>\n\t\t\t\t\t\t<td>{ sampleCount }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Sample mean:</td>\n\t\t\t\t\t\t<td>{ ( sampleMean ).toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Sample Standard Deviation:</td>\n\t\t\t\t\t\t<td>{ ( sampleStandardDev ).toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<br />\n\t\t\t<div className=\"options\">\n\t\t\t\t<div>\n\t\t\t\t\t<p>Set difference threshold percent:</p>\n\t\t\t\t\t<input type=\"number\" onChange={ e => setThreshold( Number( e.target.value ))} value={ threshold } min={ 0 } />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Actuals Standard Dev:</td>\n\t\t\t\t\t\t<td>{ actualStDev.toFixed( 3 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Difference Threshold:</td>\n\t\t\t\t\t\t<td>{ threshStDev.toFixed( 3 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<br />\n\t\t\t<table className=\"comparison-table\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t<th>Prediction Up</th>\n\t\t\t\t\t\t<th>Prediction Flat</th>\n\t\t\t\t\t\t<th>Prediction Down</th>\n\t\t\t\t\t\t<th>Total</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Actual Up</th>\n\t\t\t\t\t\t<td>{ upAUpP } / { ( upAUpP / upPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ upAFlatP } / { ( upAFlatP / flatPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ upADownP } / { ( upADownP / downPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ upATotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Actual Flat</th>\n\t\t\t\t\t\t<td>{ flatAUpP } / { ( flatAUpP / upPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ flatAFlatP } / { ( flatAFlatP / flatPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ flatADownP } / { ( flatADownP / downPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ flatATotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Actual Down</th>\n\t\t\t\t\t\t<td>{ downAUpP } / { ( downAUpP / upPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ downAFlatP } / { ( downAFlatP / flatPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ downADownP } / { ( downADownP / downPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ downATotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Total</th>\n\t\t\t\t\t\t<td>{ upPTotal }</td>\n\t\t\t\t\t\t<td>{ flatPTotal }</td>\n\t\t\t\t\t\t<td>{ downPTotal }</td>\n\t\t\t\t\t\t<td>{ upATotal + flatATotal + downATotal } / { upPTotal + flatPTotal + downPTotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<p>% are of number of predictions per the actual, so accuracy in that actual direction</p>\n\t\t</>\n\t);\n});\nStats.propTypes = {\n\tdata: PropTypes.array,\n};\n","\nimport React, { memo } from \"react\";\nimport PropTypes from \"proptypes\";\nimport _ from \"lodash\";\nimport { ResponsiveContainer, ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, ReferenceLine } from \"recharts\";\nimport { min, max, mean, standardDeviation } from \"simple-statistics\";\n\nexport default function Change ({ data }) {    \n\treturn (\n\t\t<div className=\"charts change\">\n\t\t\t<hr />\n\t\t\t<div className=\"stats\">\n\t\t\t\t<Stats data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"distribution\">\n\t\t\t\t<DistributionChart data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"scatter\">\n\t\t\t\t<DotChart data={ data } />\n\t\t\t</div>\n\t\t</div> \n\t);\n}\nChange.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst DotChart = memo( function DotChart ({ data }) {\n\tconst graphData = _.map( data, ({ actual, prediction }) => ({ actual: Number(( actual ).toFixed( 4 ) * 100 ), prediction: Number(( prediction ).toFixed( 4 ) * 100 ), z: 1 }));\n\tconst actualsStDev = standardDeviation( _.map( graphData, \"actual\" ));\n\tconst negActualsStDev = actualsStDev * -1;\n\n\tconst largestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = Math.abs( _.get( current, \"actual\" ));\n\t\tconst prediction = Math.abs( _.get( current, \"prediction\" ));\n\t\tif ( actual > prediction ) return actual > total ? actual : total;\n\t\treturn prediction > total ? prediction: total;\n\t}, -Infinity );\n\tconst domain =  [ -1 * Math.ceil( largestVal * 2 ) / 2, 1 * Math.ceil( largestVal * 2 ) / 2 ];\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Predictions vs Actuals scatter</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 50, bottom: 20, right: 70, left: 20 }}>\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<XAxis type=\"number\" dataKey=\"actual\" name=\"actual\" domain={ domain } label={{ value: \"Actual Change (cents)\", position: \"bottom\", offset: 0 }} />\n\t\t\t\t\t<YAxis type=\"number\" dataKey=\"prediction\" name=\"prediction\" domain={ domain } label={{ value: \"Predicted Change (cents)\", position: \"left\", angle: -90, offset: 0 }} />\n\t\t\t\t\t<ZAxis dataKey=\"z\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n\t\t\t\t\t<Scatter data={ graphData } fill=\"#82ca9d\" shape=\"circle\" line={{ stroke: \"#e16162\", strokeWidth: 1 }} lineType=\"fitting\" />\n\t\t\t\t\t<ReferenceLine x={ actualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"+ σ\", position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ negActualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"- σ\", position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine y={ actualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"+ σ\", position: \"insideTopLeft\" }} />\n\t\t\t\t\t<ReferenceLine y={ negActualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"- σ\", position: \"insideTopLeft\" }} /> \n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n});\nDotChart.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst DistributionChart = memo( function DistributionChart ({ data }) {\n\tconst numberOfIntervals = 50;\n    \n\tconst variations = _.map( data, ({ actual, prediction }) => Number(( actual - prediction ).toFixed( 4 ) * 100 ));\n\tconst range = 2 * max([ 0 - min( variations ), max( variations ) ]);\n\tconst intervalLength = range / numberOfIntervals; \n\tconst sampleMean = mean( variations );\n\tconst actualsStDev = standardDeviation( variations );\n\tconst start = range / 2 * -1;\n\n\tconst graphData = _.map( _.range( 0, numberOfIntervals + 1 ), i => {\n\t\tconst bottom = Number(( start + intervalLength * ( i - 0.5 )).toFixed( 5 ));\n\t\tconst middle = Number(( start + intervalLength * ( i )).toFixed( 5 ));\n\t\tconst top = Number(( start + intervalLength * ( i + 0.5 )).toFixed( 5 )); \n\t\tconst matchedVariations = _.filter( variations, variation => variation > bottom && variation <= top );\n\t\treturn { name: middle, value: _.size( matchedVariations ), size: 0 };\n\t});\n    \n\tconst positiveStDevLineX = sampleMean + actualsStDev;\n\tconst negativeStDevLineX = sampleMean - actualsStDev;\n\tconsole.log( negativeStDevLineX, positiveStDevLineX );\n        \n\treturn (\n\t\t<>\n\t\t\t<h3>Variations distribution</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 20, bottom: 20, left: -25 }} >\n\t\t\t\t\t<XAxis dataKey=\"name\" />\n\t\t\t\t\t<YAxis dataKey=\"value\" />\n\t\t\t\t\t<ZAxis dataKey=\"size\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }}/>\n\t\t\t\t\t<Scatter data={ graphData } line={{ stroke: \"#82ca9d\", strokeWidth: 1 }} stroke=\"#82ca9d\" />\n\t\t\t\t\t<ReferenceLine x={ sampleMean } stroke=\"#C98BBE\" label={{ value: \"Mean\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ positiveStDevLineX } stroke=\"#C98BBE\" label={{ value: \"+ σ\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ negativeStDevLineX } stroke=\"#C98BBE\" label={{ value: \"- σ\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n});\nDistributionChart.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst Stats = memo( function Stats ({ data }) {\n\tconst sampleCount = _.size( data );\n    \n\tconst actuals = _.map( data, \"actual\" );\n\tconst actualsMean = mean( actuals );\n\tconst actualsStDev = standardDeviation( actuals ) - actualsMean;\n\tconst negActualsStDev = actualsMean - actualsStDev;\n        \n\tconst upAUpP = _.size( _.filter( data, ({ actual, prediction }) => actual > actualsStDev && prediction > actualsStDev ));\n\tconst upAFlatP = _.size( _.filter( data, ({ actual, prediction }) => actual > actualsStDev && prediction >= negActualsStDev && prediction <= actualsStDev ));\n\tconst upADownP = _.size( _.filter( data, ({ actual, prediction }) => actual > actualsStDev && prediction < negActualsStDev ));\n\tconst upATotal = _.size( _.filter( data, ({ actual }) => actual > actualsStDev ));\n\tconst upPTotal = _.size( _.filter( data, ({ prediction }) => prediction > actualsStDev ));\n    \n\tconst flatAUpP = _.size( _.filter( data, ({ actual, prediction }) => actual >= negActualsStDev && actual <= actualsStDev && prediction > actualsStDev ));\n\tconst flatAFlatP = _.size( _.filter( data, ({ actual, prediction }) => actual >= negActualsStDev && actual <= actualsStDev && prediction >= negActualsStDev && prediction <= actualsStDev ));\n\tconst flatADownP = _.size( _.filter( data, ({ actual, prediction }) => actual >= negActualsStDev && actual <= actualsStDev && prediction < negActualsStDev ));\n\tconst flatATotal = _.size( _.filter( data, ({ actual }) => actual >= negActualsStDev && actual <= actualsStDev ));\n\tconst flatPTotal = _.size( _.filter( data, ({ prediction }) => prediction >= negActualsStDev && prediction <= actualsStDev ));\n    \n\tconst downAUpP = _.size( _.filter( data, ({ actual, prediction }) => actual < negActualsStDev && prediction > actualsStDev ));\n\tconst downAFlatP = _.size( _.filter( data, ({ actual, prediction }) => actual < negActualsStDev && prediction >= negActualsStDev && prediction <= actualsStDev ));\n\tconst downADownP = _.size( _.filter( data, ({ actual, prediction }) => actual < negActualsStDev && prediction < negActualsStDev ));\n\tconst downATotal = _.size( _.filter( data, ({ actual }) => actual < negActualsStDev ));\n\tconst downPTotal = _.size( _.filter( data, ({ prediction }) => prediction < negActualsStDev ));\n\n\tconst variations = _.map( data, ({ actual, prediction }) => Number(( actual - prediction ).toFixed( 4 )));\n\tconst sampleMean = mean( variations );\n\tconst sampleStandardDev = standardDeviation( variations );\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Basic Stats</h3>\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Number of Samples:</td>\n\t\t\t\t\t\t<td>{ sampleCount }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Sample mean:</td>\n\t\t\t\t\t\t<td>{ ( sampleMean ).toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Sample Standard Deviation:</td>\n\t\t\t\t\t\t<td>{ ( sampleStandardDev ).toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<br />\n\t\t\t<table className=\"comparison-table\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t<th>Prediction Up</th>\n\t\t\t\t\t\t<th>Prediction Flat</th>\n\t\t\t\t\t\t<th>Prediction Down</th>\n\t\t\t\t\t\t<th>Total</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Actual Up</th>\n\t\t\t\t\t\t<td>{ upAUpP } / { ( upAUpP / upPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ upAFlatP } / { ( upAFlatP / flatPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ upADownP } / { ( upADownP / downPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ upATotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Actual Flat</th>\n\t\t\t\t\t\t<td>{ flatAUpP } / { ( flatAUpP / upPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ flatAFlatP } / { ( flatAFlatP / flatPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ flatADownP } / { ( flatADownP / downPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ flatATotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Actual Down</th>\n\t\t\t\t\t\t<td>{ downAUpP } / { ( downAUpP / upPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ downAFlatP } / { ( downAFlatP / flatPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ downADownP } / { ( downADownP / downPTotal * 100 ).toFixed( 1 ) }%</td>\n\t\t\t\t\t\t<td>{ downATotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Total</th>\n\t\t\t\t\t\t<td>{ upPTotal }</td>\n\t\t\t\t\t\t<td>{ flatPTotal }</td>\n\t\t\t\t\t\t<td>{ downPTotal }</td>\n\t\t\t\t\t\t<td>{ upATotal + flatATotal + downATotal } / { upPTotal + flatPTotal + downPTotal }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<p>% are of number of predictions per the actual, so accuracy in that actual direction</p>\n\t\t</>\n\t);\n});\nStats.propTypes = {\n\tdata: PropTypes.array,\n};\n","\nimport React, { useEffect, useState } from \"react\";\nimport { useQuery, useLazyQuery } from \"@apollo/react-hooks\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner , faCheck, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport _ from \"lodash\";\nimport gql from \"graphql-tag\";\nimport { max } from \"simple-statistics\";\nimport Absolute from \"./Views/Absolute\";\nimport Change from \"./Views/Change\";\n\nconst GET_VERSIONS = gql`\nquery GetVersions {\n    versions ( order_by: { id: asc } ) { id prediction_type }\n}\n`;\n\nconst GET_PREDICTIONS = gql`\nquery GetPredictions ( $version: Int!, $was_back_predicted: [Boolean!], $start_time: timestamptz! ) {\n    predictions ( where: { \n        prediction: { _is_null: false }, \n        actual: { _is_null: false }, \n        _version: { _eq: $version }, \n        was_back_predicted: { _in: $was_back_predicted },\n        time: { _gte: $start_time }\n    }) {\n        actual id time\n        instrument\n        prediction\n        _version\n        close\n    }\n}`;\n\nexport default function Home () {\n\tconst [ instrument, setInstrument ] = useState( false );\n\tconst [ version, setVersion ] = useState( -1 );\n\tconst [ includeBackPredicted, setIncludeBackPredicted ] = useState( true );\n\tconst [ daysBack, setDaysBack ] = useState( 7 );\n\tconst start_time = daysBack === 0 ? new Date( 0 ).toISOString() : new Date( Date.now() - ( 1000 * 60 * 60 * 24 * daysBack )).toISOString();\n    \n\tconst { data: versionsData } = useQuery( GET_VERSIONS );\n\tconst [ getPredictions, { data, loading }] = useLazyQuery( GET_PREDICTIONS );\n\t// eslint-disable-next-line\n\tuseEffect(() => getPredictions({ variables: { version, was_back_predicted: includeBackPredicted ? [ true, false ] : [ false ], start_time }}), [ version, includeBackPredicted, daysBack ]);\n\n\tconst predictions = _.get( data, \"predictions\" );\n\n\tconst versions = _.map( _.get( versionsData, \"versions\" ), \"id\" );\n\t// eslint-disable-next-line\n\tuseEffect(() => { if ( version === -1 && !_.isEmpty( versions )) setVersion( max( versions )); }, [ versions ]);\n\n\tconst prediction_type = _.get( _.find( _.get( versionsData, \"versions\" ), [ \"id\", version ]), \"prediction_type\" );\n\tconst instruments = _.uniq( _.map( predictions, \"instrument\" ));\n\t// eslint-disable-next-line\n    useEffect(() => setInstrument( _.first( instruments )), [ instruments, version ]);\n        \n\tconst filteredPredictions = _.filter( predictions, [ \"instrument\", instrument ]);\n\n\treturn (\n\t\t<div className=\"body\">\n\t\t\t<div className=\"header\">\n\t\t\t\t<h1>Visualisation and Stats analysis of my ML model</h1>\n\t\t\t\t<p>All predictions pulled for my model, visualised and analysed.</p>\n\t\t\t</div>\n\t\t\t<div className=\"options\">\n\t\t\t\t<div>\n\t\t\t\t\t<p>Select Version:</p>\n\t\t\t\t\t<select value={ version } onChange={ e => setVersion( Number( e.target.value ))}>\n\t\t\t\t\t\t{ !_.isEmpty( versions ) && _.map( versions, version => <option key={ version } value={ version }>{ version }</option> ) }\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<p>Select Instruments:</p>\n\t\t\t\t\t<select value={ instrument } onChange={ e => setInstrument( e.target.value )}>\n\t\t\t\t\t\t{ !_.isEmpty( instruments ) && _.map( instruments, instrument => <option key={ instrument } value={ instrument }>{ instrument }</option> ) }\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div onClick={ () => setIncludeBackPredicted( !includeBackPredicted ) }>\n\t\t\t\t\t<p>Include back-predicted results</p>\n\t\t\t\t\t{ includeBackPredicted ? <FontAwesomeIcon icon={ faCheck } /> : <FontAwesomeIcon icon={ faTimes } className=\"unchecked\" /> }\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<p>How many days back (0 = all)?</p>\n\t\t\t\t\t<input type=\"number\" onChange={ e => setDaysBack( Number( e.target.value ))} value={ daysBack } />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{ ( loading || !version ) ? \n\t\t\t\t<div className=\"loader\">\n\t\t\t\t\t<FontAwesomeIcon icon={ faSpinner } spin size=\"3x\" />\n\t\t\t\t</div>\n\t\t\t\t:\n\t\t\t\t<>\n\t\t\t\t\t{ !_.isEmpty( filteredPredictions ) ? \n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{ prediction_type === \"absolute\" && <Absolute data={ filteredPredictions } /> }\n\t\t\t\t\t\t\t{ prediction_type === \"change\" && <Change data={ filteredPredictions } /> }\n\t\t\t\t\t\t</>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<p>Nothing to display - change a filter!</p>\n\t\t\t\t\t}\n\t\t\t\t</>\n\t\t\t}\n\t\t</div>\n\t);\n}\n","\nimport React from \"react\";\nimport Home from \"./Home\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\n\n\nexport default function App () {\n\tconst client = new ApolloClient({\n\t\turi: \"https://boiling-ridge-24261.herokuapp.com/v1/graphql\",\n\t});\n\n\treturn (\n\t\t<ApolloProvider client={ client }>\n\t\t\t<Home />\n\t\t</ApolloProvider>\n\t);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById( \"root\" ),\n);\n"],"sourceRoot":""}