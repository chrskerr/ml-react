{"version":3,"sources":["Home.js","App.js","webpack:///./src/index.js?b635"],"names":["GET_VERSIONS","gql","GET_PREDICTIONS","Home","useState","instrument","setInstrument","version","setVersion","versionsData","useQuery","data","useLazyQuery","getPredictions","loading","useEffect","variables","allPredictions","_","get","versionsPredictions","filter","versions","map","Math","max","instruments","uniq","first","instrumentsVersionsPredictions","className","value","onChange","e","target","isEmpty","key","icon","faSpinner","spin","size","DotChart","memo","graphData","actual","prediction","regressionData","largestVal","reduce","total","current","abs","Infinity","domain","toFixed","console","log","regressionLineFunc","linearRegressionLine","linearRegression","regressionLine","margin","top","bottom","type","dataKey","name","label","position","offset","angle","orientation","cursor","strokeDasharray","fill","line","stroke","strokeWidth","isEqual","ScatterChart","proptypes","PropTypes","array","width","height","right","left","App","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59cd2217.chunk.js","sourcesContent":["\nimport React, { memo, useEffect, useState } from \"react\";\nimport PropTypes from \"proptypes\";\nimport { useQuery, useLazyQuery } from \"@apollo/react-hooks\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\nimport _ from \"lodash\";\nimport gql from \"graphql-tag\";\nimport { ResponsiveContainer, ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, LineChart, Line, ComposedChart } from \"recharts\";\nimport { linearRegression, linearRegressionLine } from \"simple-statistics\";\n\nconst GET_VERSIONS = gql`\nquery GetVersions {\n    versions { id }\n}\n`;\n\nconst GET_PREDICTIONS = gql`\nquery GetPredictions ( $version: Int! ) {\n    predictions ( where: { prediction: { _is_null: false }, actual: { _is_null: false }, _version: { _eq: $version }}) {\n        actual id time\n        instrument\n        prediction\n        _version\n    }\n}`;\n\nexport default function Home () {\n\tconst [ instrument, setInstrument ] = useState( false );\n\tconst [ version, setVersion ] = useState( false );\n    \n\tconst { data: versionsData } = useQuery( GET_VERSIONS );\n\tconst [ getPredictions, { data, loading }] = useLazyQuery( GET_PREDICTIONS );\n\tuseEffect(() => getPredictions({ variables: { version }}), [ version ]);\n\n\tconst allPredictions = _.get( data, \"predictions\" );\n\tconst versionsPredictions = _.filter( allPredictions, [ \"_version\", version ]);\n\n\tconst versions = _.map( _.get( versionsData, \"versions\" ), \"id\" );\n\tuseEffect(() => { if ( !version ) setVersion( Math.max( versions )); }, [ versions ]);\n\n\tconst instruments = _.uniq( _.map( versionsPredictions, \"instrument\" ));\n\tuseEffect(() => { if ( !instrument ) setInstrument( _.first( instruments ));}, [ instruments ]);\n    \n\tconst instrumentsVersionsPredictions = _.filter( versionsPredictions, [ \"instrument\", instrument ]);\n\n\treturn (\n\t\t<div className=\"body\">\n\t\t\t<div className=\"header\">\n\t\t\t\t<h2>Visualisation and Stats analysis of my ML model</h2>\n\t\t\t\t<p>All predictions pulled for my model, visualised and analysed.</p>\n\t\t\t</div>\n\n\t\t\t<div className=\"options\">\n\t\t\t\t<div>\n\t\t\t\t\t<p>Select Version:</p>\n\t\t\t\t\t<select value={ version } onChange={ e => setVersion( e.target.value )}>\n\t\t\t\t\t\t{ !_.isEmpty( versions ) && _.map( versions, version => <option key={ version } value={ version }>{ version }</option> ) }\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<p>Select Instruments:</p>\n\t\t\t\t\t<select value={ instrument } onChange={ e => setInstrument( e.target.value )}>\n\t\t\t\t\t\t{ !_.isEmpty( instruments ) && _.map( instruments, instrument => <option key={ instrument } value={ instrument }>{ instrument }</option> ) }\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{ ( loading || !version ) ? \n\t\t\t\t<div className=\"loader\">\n\t\t\t\t\t<FontAwesomeIcon icon={ faSpinner } spin size=\"3x\" />\n\t\t\t\t</div>\n\t\t\t\t:\n\t\t\t\t<>{ !_.isEmpty( instrumentsVersionsPredictions ) ?\n\t\t\t\t\t<div className=\"chart\">\n\t\t\t\t\t\t<div className=\"scatter\">\n\t\t\t\t\t\t\t<DotChart data={ instrumentsVersionsPredictions } />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/* <div className=\"distribution\">\n\t\t\t\t\t\t\t<DistributionChart data={ instrumentsVersionsPredictions } />\n\t\t\t\t\t\t</div> */}\n\t\t\t\t\t</div> \n\t\t\t\t\t:\n\t\t\t\t\t<p>Nothing to display - change a filter!</p>\n\t\t\t\t}</>\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nconst DotChart = memo( function DotChart ({ data }) {\n\tconst graphData = _.map( data, ({ actual, prediction }) => ({ actual: actual * 100, prediction: prediction * 100 }));\n\tconst regressionData = _.map( data, ({ actual, prediction }) => ([ actual * 100, prediction * 100 ]));\n\n\tconst largestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = Math.abs( _.get( current, \"actual\" ));\n\t\tconst prediction = Math.abs( _.get( current, \"prediction\" ));\n\t\tif ( actual > prediction ) return actual > total ? actual : total;\n\t\treturn prediction > total ? prediction: total;\n\t}, -Infinity );\n\tconst domain = [ -1 * largestVal.toFixed( 2 ), 1 * largestVal.toFixed( 2 ) ];\n        \n\tconsole.log( domain );\n\n\tconst regressionLineFunc = linearRegressionLine( linearRegression( regressionData ));\n\tconst regressionLine = [\n\t\t{ actual: domain[ 0 ], prediction: regressionLineFunc( domain[ 0 ]) },\n\t\t{ actual: domain[ 1 ], prediction: regressionLineFunc( domain[ 1 ]) },\n\t];\n\n\treturn (\n\t\t<>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ComposedChart margin={{ top: 20, bottom: 20 }} data={ graphData }>\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<XAxis type=\"number\" dataKey=\"actual\" name=\"actual\" domain={ domain } label={{ value: \"Actual Change (cents)\", position: \"bottom\", offset: 0 }} />\n\t\t\t\t\t<YAxis type=\"number\" dataKey=\"prediction\" name=\"prediction\" domain={ domain } label={{ value: \"Predicted Change (cents)\", position: \"centerBottom\", angle: 90, offset: 5 }} orientation=\"right\" />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n\t\t\t\t\t<Scatter name=\"A school\" data={ graphData } fill=\"#f9bc60\" />\n\t\t\t\t\t<Scatter line={{ stroke: \"#e16162\", strokeWidth: 1 }} data={ regressionLine } />\n\t\t\t\t</ComposedChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n}, _.isEqual );\nScatterChart.proptypes = {\n\tdata: PropTypes.array,\n};\n\nconst DistributionChart = memo( function DistributionChart ({ data }) {\n\tconst variations = _.map( data, ({ actual, prediction }) => actual - prediction );\n\n\n    \t\n\treturn (\n\t\t<>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<LineChart\n\t\t\t\t\twidth={500}\n\t\t\t\t\theight={300}\n\t\t\t\t\tdata={data}\n\t\t\t\t\tmargin={{\n\t\t\t\t\t\ttop: 5, right: 30, left: 20, bottom: 5,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\n\t\t\t\t\t<XAxis dataKey=\"name\" />\n\t\t\t\t\t<YAxis />\n\t\t\t\t\t<Tooltip />\n\t\t\t\t\t<Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\n\t\t\t\t</LineChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n}, _.isEqual );\nDistributionChart.proptypes = {\n\tdata: PropTypes.array,\n};\n","\nimport React from \"react\";\nimport Home from \"./Home\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\n\n\nexport default function App () {\n\tconst client = new ApolloClient({\n\t\turi: \"https://boiling-ridge-24261.herokuapp.com/v1/graphql\",\n\t});\n\n\treturn (\n\t\t<ApolloProvider client={ client }>\n\t\t\t<Home />\n\t\t</ApolloProvider>\n\t);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById( \"root\" ),\n);\n"],"sourceRoot":""}