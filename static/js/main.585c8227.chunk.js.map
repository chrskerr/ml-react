{"version":3,"sources":["Home.js","App.js","webpack:///./src/index.js?b635"],"names":["SUBSCRIPTION","gql","Home","useSubscription","data","predictions","loading","_","get","console","log","className","App","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","timeout","link","split","query","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wnBAUA,IAAMA,E,MAAeC,GAAH,KAaH,SAASC,IAAS,IAAD,EACLC,YAAiBH,GAAnCI,EADuB,EACvBA,KAEFC,GAHyB,EACjBC,QAEMC,IAAEC,IAAKJ,EAAM,4BAGjC,OAFAK,QAAQC,IAAKL,GAGZ,yBAAKM,UAAU,QACd,yBAAKA,UAAU,UACd,+EACA,6FAED,4C,0DCxBY,SAASC,IAEvB,IAAMC,EAAW,IAAIC,IAAS,CAC7BC,IAAK,yDAGAC,EAAS,IAAIC,IAAc,CAChCF,IAAK,qDACLG,QAAS,CACRC,WAAW,EACXC,QAAS,OAILC,EAAOC,aACZ,YAAgB,IAAbC,EAAY,EAAZA,MAAY,EACcC,YAAmBD,GAAvCE,EADM,EACNA,KAAMC,EADA,EACAA,UACd,MAAgB,wBAATD,GAAgD,iBAAdC,IAE1CV,EACAH,GAGKc,EAAS,IAAIC,IAAa,CAC/BP,OACAQ,MAAO,IAAIC,MAGZ,OACC,kBAAC,IAAD,CAAgBH,OAASA,GACxB,kBAACzB,EAAD,OCpCH6B,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAACrB,EAAD,OAERsB,SAASC,eAAe,W","file":"static/js/main.585c8227.chunk.js","sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"proptypes\";\nimport { useSubscription } from \"@apollo/react-hooks\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner, faCheck, faTimes, faExternalLinkAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport _ from \"lodash\";\nimport gql from \"graphql-tag\";\nimport { parseJSON, format, subBusinessDays, set, formatISO } from \"date-fns\";\n\nconst SUBSCRIPTION = gql`\nsubscription SubcribeVersions {\n    versions( limit: 1, order_by: { id: desc }) {\n        id\n        predictions ( where: { prediction: { _is_null: false }, actual: { _is_null: false }}) {\n            actual id time\n            instrument\n            prediction\n        }\n    }\n}`;\n\n\nexport default function Home () {\n\tconst { data, loading } = useSubscription( SUBSCRIPTION );\n\n\tconst predictions = _.get( data, \"versions[0].predictions\" );\n\tconsole.log( predictions );\n\n\treturn (\n\t\t<div className=\"body\">\n\t\t\t<div className=\"header\">\n\t\t\t\t<h2>Visualisation and Stats analysis of my ML model</h2>\n\t\t\t\t<p>All predictions pulled for my model, visualised and analysed.</p>\n\t\t\t</div>\n\t\t\t<p>Hello World!</p>\n\t\t</div>\n\t);\n}\n","\nimport React from \"react\";\nimport Home from \"./Home\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-client\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { split } from \"apollo-link\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nexport default function App () {\n\n\tconst httpLink = new HttpLink({\n\t\turi: \"https://boiling-ridge-24261.herokuapp.com/v1/graphql\",\n\t});\n    \n\tconst wsLink = new WebSocketLink({\n\t\turi: \"wss://boiling-ridge-24261.herokuapp.com/v1/graphql\",\n\t\toptions: {\n\t\t\treconnect: true,\n\t\t\ttimeout: 30000,\n\t\t},\n\t});\n\n\tconst link = split(\n\t\t({ query }) => {\n\t\t\tconst { kind, operation } = getMainDefinition( query );\n\t\t\treturn kind === \"OperationDefinition\" && operation === \"subscription\";\n\t\t},\n\t\twsLink,\n\t\thttpLink,\n\t);\n\n\tconst client = new ApolloClient({\n\t\tlink,\n\t\tcache: new InMemoryCache(),\n\t});\n\n\treturn (\n\t\t<ApolloProvider client={ client }>\n\t\t\t<Home />\n\t\t</ApolloProvider>\n\t);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\ndocument.getElementById('root')\n);\n"],"sourceRoot":""}