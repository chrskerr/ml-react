{"version":3,"sources":["Views/Absolute.js","Views/Change.js","Home.js","App.js","webpack:///./src/index.js?b635"],"names":["Absolute","data","className","DistributionChart","DotChartDifference","DotChartPrice","graphData","_","map","actual","prediction","Number","toFixed","z","largestVal","reduce","total","current","get","Infinity","domain","margin","top","bottom","right","left","type","dataKey","name","label","value","position","offset","angle","range","cursor","strokeDasharray","fill","shape","line","stroke","strokeWidth","lineType","close","actualsStDev","standardDeviation","negActualsStDev","x","y","variations","max","min","intervalLength","sampleMean","mean","start","numberOfIntervals","i","middle","matchedVariations","filter","variation","size","positiveStDevLineX","negativeStDevLineX","orientation","Stats","sampleCount","differences","upwardSamples","downwardSamples","flatSamples","upwardCorrect","downwardsCorrect","flatCorrect","percUpwardCorrect","percDownwardsCorrect","percFlatCorrect","sampleStandardDev","Change","DotChart","Math","abs","ceil","console","log","GET_VERSIONS","gql","GET_PREDICTIONS","Home","useState","instrument","setInstrument","version","setVersion","includeBackPredicted","setIncludeBackPredicted","versionsData","useQuery","useLazyQuery","getPredictions","loading","useEffect","variables","was_back_predicted","predictions","versions","isEmpty","prediction_type","find","instruments","uniq","first","filteredPredictions","onChange","e","target","key","onClick","icon","faCheck","faTimes","faSpinner","spin","App","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.413df0a9.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport PropTypes from \"proptypes\";\nimport _ from \"lodash\";\nimport { ResponsiveContainer, ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, ReferenceLine } from \"recharts\";\nimport { min, max, mean, standardDeviation } from \"simple-statistics\";\n\nexport default function Absolute ({ data }) {    \n\treturn (\n\t\t<div className=\"charts absolute\">\n\t\t\t<hr />\n\t\t\t<div className=\"stats\">\n\t\t\t\t<Stats data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"distribution\">\n\t\t\t\t<DistributionChart data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"scatter\">\n\t\t\t\t<DotChartDifference data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"scatter\">\n\t\t\t\t<DotChartPrice data={ data } />\n\t\t\t</div>\n\t\t</div> \n\n\t);\n}\nAbsolute.propTypes = {\n\tdata: PropTypes.array,\n};\n\nfunction DotChartPrice ({ data }) {\n\tconst graphData = _.map( data, ({ actual, prediction }) => ({ actual: Number(( actual ).toFixed( 4 )), prediction: Number(( prediction ).toFixed( 4 )), z: 1 }));\n\n\tconst largestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual > prediction ) return actual > total ? actual : total;\n\t\treturn prediction > total ? prediction: total;\n\t}, -Infinity );\n\tconst smallestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual < prediction ) return actual < total ? actual : total;\n\t\treturn prediction < total ? prediction: total;\n\t}, Infinity );\n\tconst domain =  [ smallestVal, largestVal ];\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Price distribution scatter</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 50, bottom: 20, right: 70, left: 20 }}>\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<XAxis type=\"number\" dataKey=\"actual\" name=\"actual\" domain={ domain } label={{ value: \"Actual Change (cents)\", position: \"bottom\", offset: 0 }} />\n\t\t\t\t\t<YAxis type=\"number\" dataKey=\"prediction\" name=\"prediction\" domain={ domain } label={{ value: \"Predicted Change (cents)\", position: \"left\", angle: -90, offset: 0 }} />\n\t\t\t\t\t<ZAxis dataKey=\"z\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n\t\t\t\t\t<Scatter data={ graphData } fill=\"#82ca9d\" shape=\"circle\" line={{ stroke: \"#e16162\", strokeWidth: 1 }} lineType=\"fitting\" />\n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n}\nDotChartPrice.propTypes = {\n\tdata: PropTypes.array,\n};\n\nfunction DotChartDifference ({ data }) {\n\tconst graphData = _.map( data, ({ actual, prediction, close }) => ({ actual: Number(( actual - close ).toFixed( 4 )), prediction: Number(( prediction - close ).toFixed( 4 )), z: 1 }));\n\tconst actualsStDev = standardDeviation( _.map( graphData, \"actual\" ));\n\tconst negActualsStDev = actualsStDev * -1;\n    \n\tconst largestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual > prediction ) return actual > total ? actual : total;\n\t\treturn prediction > total ? prediction: total;\n\t}, -Infinity );\n\tconst smallestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual < prediction ) return actual < total ? actual : total;\n\t\treturn prediction < total ? prediction: total;\n\t}, Infinity );\n\tconst domain =  [ smallestVal, largestVal ];\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Prediction difference distribution scatter</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 50, bottom: 20, right: 70, left: 20 }}>\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<XAxis type=\"number\" dataKey=\"actual\" name=\"actual\" domain={ domain } label={{ value: \"Actual Change (cents)\", position: \"bottom\", offset: 0 }} />\n\t\t\t\t\t<YAxis type=\"number\" dataKey=\"prediction\" name=\"prediction\" domain={ domain } label={{ value: \"Predicted Change (cents)\", position: \"left\", angle: -90, offset: 0 }} />\n\t\t\t\t\t<ZAxis dataKey=\"z\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n\t\t\t\t\t<Scatter data={ graphData } fill=\"#82ca9d\" shape=\"circle\" line={{ stroke: \"#e16162\", strokeWidth: 2 }} lineType=\"fitting\" />\n\t\t\t\t\t<ReferenceLine x={ actualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"+ σ\", position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ negActualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"- σ\", position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine y={ actualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"+ σ\", position: \"insideTopLeft\" }} />\n\t\t\t\t\t<ReferenceLine y={ negActualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"- σ\", position: \"insideTopLeft\" }} /> \n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n}\nDotChartDifference.propTypes = {\n\tdata: PropTypes.array,\n};\n\nfunction DistributionChart ({ data }) {\n\tconst numberOfIntervals = 50;\n    \n\tconst variations = _.map( data, ({ actual, prediction }) => Number(( actual - prediction ).toFixed( 4 )));\n\tconst range = 2 * max([ 0 - min( variations ), max( variations ) ]);\n\tconst intervalLength = range / numberOfIntervals; \n\tconst sampleMean = mean( variations );\n\tconst actualsStDev = standardDeviation( variations );\n\tconst start = range / 2 * -1;\n\n\tconst graphData = _.map( _.range( 0, numberOfIntervals + 1 ), i => {\n\t\tconst bottom = Number(( start + intervalLength * ( i - 0.5 )).toFixed( 5 ));\n\t\tconst middle = Number(( start + intervalLength * ( i )).toFixed( 5 ));\n\t\tconst top = Number(( start + intervalLength * ( i + 0.5 )).toFixed( 5 )); \n\t\tconst matchedVariations = _.filter( variations, variation => variation > bottom && variation <= top );\n\t\treturn { name: middle, value: _.size( matchedVariations ), size: 0 };\n\t});\n    \n\tconst positiveStDevLineX = sampleMean + actualsStDev;\n\tconst negativeStDevLineX = sampleMean - actualsStDev;\n        \n\treturn (\n\t\t<>\n\t\t\t<h3>Variations distribution</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 20, bottom: 20, left: -25 }} >\n\t\t\t\t\t<XAxis dataKey=\"name\" />\n\t\t\t\t\t<YAxis dataKey=\"value\" />\n\t\t\t\t\t<ZAxis dataKey=\"size\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }}/>\n\t\t\t\t\t<Scatter data={ graphData } line={{ stroke: \"#82ca9d\", strokeWidth: 1 }} stroke=\"#82ca9d\" />\n\t\t\t\t\t<ReferenceLine x={ sampleMean } stroke=\"#C98BBE\" label={{ value: \"Mean\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ positiveStDevLineX } stroke=\"#C98BBE\" label={{ value: \"+ σ\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ negativeStDevLineX } stroke=\"#C98BBE\" label={{ value: \"- σ\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n}\nDistributionChart.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst Stats = ({ data }) => {\n\tconst sampleCount = _.size( data );\n    \n\tconst differences = _.map( data, ({ actual, prediction, close }) => ({ actual: Number(( actual - close ).toFixed( 4 )), prediction: Number(( prediction - close ).toFixed( 4 )) }));\n    \n\tconst actualsStDev = standardDeviation( _.map( differences, \"actual\" ));\n\tconst negActualsStDev = actualsStDev * -1;\n    \n\tconst upwardSamples = _.filter( differences, ({ actual }) => actual > actualsStDev );\n\tconst downwardSamples = _.filter( differences, ({ actual }) => actual < negActualsStDev );\n\tconst flatSamples = _.filter( differences, ({ actual }) => actual >= negActualsStDev && actual <= actualsStDev );\n\n\tconst upwardCorrect = _.filter( upwardSamples, ({ prediction }) => prediction > actualsStDev );\n\tconst downwardsCorrect = _.filter( downwardSamples, ({ prediction }) => prediction < actualsStDev );\n\tconst flatCorrect = _.filter( flatSamples, ({ prediction }) => prediction >= negActualsStDev && prediction <= actualsStDev );\n    \n\tconst percUpwardCorrect = _.size( upwardCorrect ) / _.size( upwardSamples ) * 100;\n\tconst percDownwardsCorrect = _.size( downwardsCorrect ) / _.size( downwardSamples ) * 100;\n\tconst percFlatCorrect = _.size( flatCorrect ) / _.size( flatSamples ) * 100;\n\n\tconst variations = _.map( differences, ({ actual, prediction }) => Number(( actual - prediction ).toFixed( 4 )));\n\tconst sampleMean = mean( variations );\n\tconst sampleStandardDev = standardDeviation( variations );\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Basic Stats</h3>\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Number of Samples:</td>\n\t\t\t\t\t\t<td>{ sampleCount }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Sample mean:</td>\n\t\t\t\t\t\t<td>{ ( sampleMean ).toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Sample Standard Deviation:</td>\n\t\t\t\t\t\t<td>{ ( sampleStandardDev ).toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Percentage of samples which predicted up and were correct:</td>\n\t\t\t\t\t\t<td>{ _.size( upwardCorrect ) } / { _.size( upwardSamples ) } = { percUpwardCorrect.toFixed( 1 ) }%</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Percentage of samples which predicted downward and were correct:</td>\n\t\t\t\t\t\t<td>{ _.size( downwardsCorrect ) } / { _.size( downwardSamples ) } = { percDownwardsCorrect.toFixed( 1 ) }%</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Percentage of samples which predicted flat and were correct:</td>\n\t\t\t\t\t\t<td>{ _.size( flatCorrect ) } / { _.size( flatSamples ) } = { percFlatCorrect.toFixed( 1 ) }%</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</>\n\t);\n};\nStats.propTypes = {\n\tdata: PropTypes.array,\n};\n","\nimport React from \"react\";\nimport PropTypes from \"proptypes\";\nimport _ from \"lodash\";\nimport { ResponsiveContainer, ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, ReferenceLine } from \"recharts\";\nimport { min, max, mean, standardDeviation } from \"simple-statistics\";\n\nexport default function Change ({ data }) {    \n\treturn (\n\t\t<div className=\"charts change\">\n\t\t\t<hr />\n\t\t\t<div className=\"stats\">\n\t\t\t\t<Stats data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"distribution\">\n\t\t\t\t<DistributionChart data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"scatter\">\n\t\t\t\t<DotChart data={ data } />\n\t\t\t</div>\n\t\t</div> \n\t);\n}\nChange.propTypes = {\n\tdata: PropTypes.array,\n};\n\nfunction DotChart ({ data }) {\n\tconst graphData = _.map( data, ({ actual, prediction }) => ({ actual: Number(( actual ).toFixed( 4 ) * 100 ), prediction: Number(( prediction ).toFixed( 4 ) * 100 ), z: 1 }));\n\tconst actualsStDev = standardDeviation( _.map( graphData, \"actual\" ));\n\tconst negActualsStDev = actualsStDev * -1;\n\n\tconst largestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = Math.abs( _.get( current, \"actual\" ));\n\t\tconst prediction = Math.abs( _.get( current, \"prediction\" ));\n\t\tif ( actual > prediction ) return actual > total ? actual : total;\n\t\treturn prediction > total ? prediction: total;\n\t}, -Infinity );\n\tconst domain =  [ -1 * Math.ceil( largestVal * 2 ) / 2, 1 * Math.ceil( largestVal * 2 ) / 2 ];\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Predictions vs Actuals scatter</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 50, bottom: 20, right: 70, left: 20 }}>\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<XAxis type=\"number\" dataKey=\"actual\" name=\"actual\" domain={ domain } label={{ value: \"Actual Change (cents)\", position: \"bottom\", offset: 0 }} />\n\t\t\t\t\t<YAxis type=\"number\" dataKey=\"prediction\" name=\"prediction\" domain={ domain } label={{ value: \"Predicted Change (cents)\", position: \"left\", angle: -90, offset: 0 }} />\n\t\t\t\t\t<ZAxis dataKey=\"z\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n\t\t\t\t\t<Scatter data={ graphData } fill=\"#82ca9d\" shape=\"circle\" line={{ stroke: \"#e16162\", strokeWidth: 1 }} lineType=\"fitting\" />\n\t\t\t\t\t<ReferenceLine x={ actualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"+ σ\", position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ negActualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"- σ\", position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine y={ actualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"+ σ\", position: \"insideTopLeft\" }} />\n\t\t\t\t\t<ReferenceLine y={ negActualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"- σ\", position: \"insideTopLeft\" }} /> \n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n}\nDotChart.propTypes = {\n\tdata: PropTypes.array,\n};\n\nfunction DistributionChart ({ data }) {\n\tconst numberOfIntervals = 50;\n    \n\tconst variations = _.map( data, ({ actual, prediction }) => Number(( actual - prediction ).toFixed( 4 ) * 100 ));\n\tconst range = 2 * max([ 0 - min( variations ), max( variations ) ]);\n\tconst intervalLength = range / numberOfIntervals; \n\tconst sampleMean = mean( variations );\n\tconst actualsStDev = standardDeviation( variations );\n\tconst start = range / 2 * -1;\n\n\tconst graphData = _.map( _.range( 0, numberOfIntervals + 1 ), i => {\n\t\tconst bottom = Number(( start + intervalLength * ( i - 0.5 )).toFixed( 5 ));\n\t\tconst middle = Number(( start + intervalLength * ( i )).toFixed( 5 ));\n\t\tconst top = Number(( start + intervalLength * ( i + 0.5 )).toFixed( 5 )); \n\t\tconst matchedVariations = _.filter( variations, variation => variation > bottom && variation <= top );\n\t\treturn { name: middle, value: _.size( matchedVariations ), size: 0 };\n\t});\n    \n\tconst positiveStDevLineX = sampleMean + actualsStDev;\n\tconst negativeStDevLineX = sampleMean - actualsStDev;\n\tconsole.log( negativeStDevLineX, positiveStDevLineX );\n        \n\treturn (\n\t\t<>\n\t\t\t<h3>Variations distribution</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 20, bottom: 20, left: -25 }} >\n\t\t\t\t\t<XAxis dataKey=\"name\" />\n\t\t\t\t\t<YAxis dataKey=\"value\" />\n\t\t\t\t\t<ZAxis dataKey=\"size\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }}/>\n\t\t\t\t\t<Scatter data={ graphData } line={{ stroke: \"#82ca9d\", strokeWidth: 1 }} stroke=\"#82ca9d\" />\n\t\t\t\t\t<ReferenceLine x={ sampleMean } stroke=\"#C98BBE\" label={{ value: \"Mean\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ positiveStDevLineX } stroke=\"#C98BBE\" label={{ value: \"+ σ\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ negativeStDevLineX } stroke=\"#C98BBE\" label={{ value: \"- σ\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n}\nDistributionChart.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst Stats = ({ data }) => {\n\tconst sampleCount = _.size( data );\n    \n\tconst actualsStDev = standardDeviation( _.map( data, \"actual\" ));\n\tconst negActualsStDev = actualsStDev * -1;\n    \n\tconst upwardSamples = _.filter( data, ({ actual }) => actual > actualsStDev );\n\tconst downwardSamples = _.filter( data, ({ actual }) => actual < negActualsStDev );\n\tconst flatSamples = _.filter( data, ({ actual }) => actual >= negActualsStDev && actual <= actualsStDev );\n\n\tconst upwardCorrect = _.filter( upwardSamples, ({ prediction }) => prediction > actualsStDev );\n\tconst downwardsCorrect = _.filter( downwardSamples, ({ prediction }) => prediction < actualsStDev );\n\tconst flatCorrect = _.filter( flatSamples, ({ prediction }) => prediction >= negActualsStDev && prediction <= actualsStDev );\n    \n\tconst percUpwardCorrect = _.size( upwardCorrect ) / _.size( upwardSamples ) * 100;\n\tconst percDownwardsCorrect = _.size( downwardsCorrect ) / _.size( downwardSamples ) * 100;\n\tconst percFlatCorrect = _.size( flatCorrect ) / _.size( flatSamples ) * 100;\n\n\tconst variations = _.map( data, ({ actual, prediction }) => Number(( actual - prediction ).toFixed( 4 ) * 100 ));\n\tconst sampleMean = mean( variations );\n\tconst sampleStandardDev = standardDeviation( variations );\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Basic Stats</h3>\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Number of Samples:</td>\n\t\t\t\t\t\t<td>{ sampleCount }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Sample mean:</td>\n\t\t\t\t\t\t<td>{ ( sampleMean ).toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Sample Standard Deviation:</td>\n\t\t\t\t\t\t<td>{ ( sampleStandardDev ).toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Percentage of samples which predicted up and were correct:</td>\n\t\t\t\t\t\t<td>{ _.size( upwardCorrect ) } / { _.size( upwardSamples ) } = { percUpwardCorrect.toFixed( 1 ) }%</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Percentage of samples which predicted downward and were correct:</td>\n\t\t\t\t\t\t<td>{ _.size( downwardsCorrect ) } / { _.size( downwardSamples ) } = { percDownwardsCorrect.toFixed( 1 ) }%</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Percentage of samples which predicted flat and were correct:</td>\n\t\t\t\t\t\t<td>{ _.size( flatCorrect ) } / { _.size( flatSamples ) } = { percFlatCorrect.toFixed( 1 ) }%</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</>\n\t);\n};\nStats.propTypes = {\n\tdata: PropTypes.array,\n};\n","\nimport React, { useEffect, useState } from \"react\";\nimport { useQuery, useLazyQuery } from \"@apollo/react-hooks\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner , faCheck, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport _ from \"lodash\";\nimport gql from \"graphql-tag\";\nimport { max } from \"simple-statistics\";\nimport Absolute from \"./Views/Absolute\";\nimport Change from \"./Views/Change\";\n\nconst GET_VERSIONS = gql`\nquery GetVersions {\n    versions { id prediction_type }\n}\n`;\n\nconst GET_PREDICTIONS = gql`\nquery GetPredictions ( $version: Int!, $was_back_predicted: [Boolean!] ) {\n    predictions ( where: { \n        prediction: { _is_null: false }, \n        actual: { _is_null: false }, \n        _version: { _eq: $version }, \n        was_back_predicted: { _in: $was_back_predicted }\n    }) {\n        actual id time\n        instrument\n        prediction\n        _version\n        close\n    }\n}`;\n\nexport default function Home () {\n\tconst [ instrument, setInstrument ] = useState( false );\n\tconst [ version, setVersion ] = useState( -1 );\n\tconst [ includeBackPredicted, setIncludeBackPredicted ] = useState( true );\n    \n\tconst { data: versionsData } = useQuery( GET_VERSIONS );\n\tconst [ getPredictions, { data, loading }] = useLazyQuery( GET_PREDICTIONS );\n\t// eslint-disable-next-line\n\tuseEffect(() => getPredictions({ variables: { version, was_back_predicted: includeBackPredicted ? [ true, false ] : [ false ] }}), [ version, includeBackPredicted ]);\n\n\tconst predictions = _.get( data, \"predictions\" );\n\n\tconst versions = _.map( _.get( versionsData, \"versions\" ), \"id\" );\n\t// eslint-disable-next-line\n\tuseEffect(() => { if ( version === -1 && !_.isEmpty( versions )) setVersion( max( versions )); }, [ versions ]);\n\n\tconst prediction_type = _.get( _.find( _.get( versionsData, \"versions\" ), [ \"id\", version ]), \"prediction_type\" );\n\tconst instruments = _.uniq( _.map( predictions, \"instrument\" ));\n\t// eslint-disable-next-line\n    useEffect(() => setInstrument( _.first( instruments )), [ instruments, version ]);\n        \n\tconst filteredPredictions = _.filter( predictions, [ \"instrument\", instrument ]);\n    \n\tconsole.log( instrument, version, prediction_type, filteredPredictions );\n\n\treturn (\n\t\t<div className=\"body\">\n\t\t\t<div className=\"header\">\n\t\t\t\t<h1>Visualisation and Stats analysis of my ML model</h1>\n\t\t\t\t<p>All predictions pulled for my model, visualised and analysed.</p>\n\t\t\t</div>\n\t\t\t<div className=\"options\">\n\t\t\t\t<div>\n\t\t\t\t\t<p>Select Version:</p>\n\t\t\t\t\t<select value={ version } onChange={ e => setVersion( Number( e.target.value ))}>\n\t\t\t\t\t\t{ !_.isEmpty( versions ) && _.map( versions, version => <option key={ version } value={ version }>{ version }</option> ) }\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<p>Select Instruments:</p>\n\t\t\t\t\t<select value={ instrument } onChange={ e => setInstrument( e.target.value )}>\n\t\t\t\t\t\t{ !_.isEmpty( instruments ) && _.map( instruments, instrument => <option key={ instrument } value={ instrument }>{ instrument }</option> ) }\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div onClick={ () => setIncludeBackPredicted( !includeBackPredicted ) }>\n\t\t\t\t\t<p>Include back-predicted results</p>\n\t\t\t\t\t{ includeBackPredicted ? <FontAwesomeIcon icon={ faCheck } /> : <FontAwesomeIcon icon={ faTimes } className=\"unchecked\" /> }\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{ ( loading || !version ) ? \n\t\t\t\t<div className=\"loader\">\n\t\t\t\t\t<FontAwesomeIcon icon={ faSpinner } spin size=\"3x\" />\n\t\t\t\t</div>\n\t\t\t\t:\n\t\t\t\t<>\n\t\t\t\t\t{ !_.isEmpty( filteredPredictions ) ? \n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{ prediction_type === \"absolute\" && <Absolute data={ filteredPredictions } /> }\n\t\t\t\t\t\t\t{ prediction_type === \"change\" && <Change data={ filteredPredictions } /> }\n\t\t\t\t\t\t</>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<p>Nothing to display - change a filter!</p>\n\t\t\t\t\t}\n\t\t\t\t</>\n\t\t\t}\n\t\t</div>\n\t);\n}\n","\nimport React from \"react\";\nimport Home from \"./Home\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\n\n\nexport default function App () {\n\tconst client = new ApolloClient({\n\t\turi: \"https://boiling-ridge-24261.herokuapp.com/v1/graphql\",\n\t});\n\n\treturn (\n\t\t<ApolloProvider client={ client }>\n\t\t\t<Home />\n\t\t</ApolloProvider>\n\t);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById( \"root\" ),\n);\n"],"sourceRoot":""}