{"version":3,"sources":["Views/Absolute.js","Views/Change.js","Home.js","App.js","webpack:///./src/index.js?b635"],"names":["Absolute","data","className","DistributionChart","DotChartDifference","DotChartPrice","graphData","_","map","actual","prediction","Number","toFixed","z","regressionData","regressionLineFunc","linearRegressionLine","linearRegression","largestVal","reduce","total","current","get","Infinity","domain","regressionLine","margin","top","bottom","right","left","type","dataKey","name","label","value","position","offset","angle","range","cursor","strokeDasharray","fill","shape","line","stroke","strokeWidth","close","variations","max","min","intervalLength","sampleMean","mean","actualsStDev","standardDeviation","start","numberOfIntervals","i","middle","matchedVariations","filter","variation","size","positiveStDevLineX","negativeStDevLineX","x","orientation","Stats","sampleCount","differences","negActualsStDev","upwardSamples","downwardSamples","flatSamples","upwardCorrect","downwardsCorrect","flatCorrect","percUpwardCorrect","percDownwardsCorrect","percFlatCorrect","sampleStandardDev","Change","DotChart","Math","abs","ceil","y","console","log","GET_VERSIONS","gql","GET_PREDICTIONS","Home","useState","instrument","setInstrument","version","setVersion","includeBackPredicted","setIncludeBackPredicted","versionsData","useQuery","useLazyQuery","getPredictions","loading","useEffect","variables","was_back_predicted","predictions","versions","isEmpty","prediction_type","find","instruments","uniq","first","filteredPredictions","onChange","e","target","key","onClick","icon","faCheck","faTimes","faSpinner","spin","App","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f62bf40.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport PropTypes from \"proptypes\";\nimport _ from \"lodash\";\nimport { ResponsiveContainer, ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, ReferenceLine } from \"recharts\";\nimport { linearRegression, linearRegressionLine, min, max, mean, standardDeviation } from \"simple-statistics\";\n\nexport default function Absolute ({ data }) {    \n\treturn (\n\t\t<div className=\"charts absolute\">\n\t\t\t<hr />\n\t\t\t<div className=\"stats\">\n\t\t\t\t<Stats data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"distribution\">\n\t\t\t\t<DistributionChart data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"scatter\">\n\t\t\t\t<DotChartDifference data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"scatter\">\n\t\t\t\t<DotChartPrice data={ data } />\n\t\t\t</div>\n\t\t</div> \n\n\t);\n}\nAbsolute.propTypes = {\n\tdata: PropTypes.array,\n};\n\nfunction DotChartPrice ({ data }) {\n\tconst graphData = _.map( data, ({ actual, prediction }) => ({ actual: Number(( actual ).toFixed( 4 )), prediction: Number(( prediction ).toFixed( 4 )), z: 1 }));\n\tconst regressionData = _.map( data, ({ actual, prediction }) => ([ actual, prediction ]));\n\tconst regressionLineFunc = linearRegressionLine( linearRegression( regressionData ));\n\n\tconst largestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual > prediction ) return actual > total ? actual : total;\n\t\treturn prediction > total ? prediction: total;\n\t}, -Infinity );\n\tconst smallestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual < prediction ) return actual < total ? actual : total;\n\t\treturn prediction < total ? prediction: total;\n\t}, Infinity );\n\tconst domain =  [ smallestVal, largestVal ];\n\n\tconst regressionLine = [\n\t\t{ actual: domain[ 0 ], prediction: regressionLineFunc( domain[ 0 ]) },\n\t\t{ actual: domain[ 1 ], prediction: regressionLineFunc( domain[ 1 ]) },\n\t];\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Price distribution scatter</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 50, bottom: 20, right: 70, left: 20 }}>\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<XAxis type=\"number\" dataKey=\"actual\" name=\"actual\" domain={ domain } label={{ value: \"Actual Change (cents)\", position: \"bottom\", offset: 0 }} />\n\t\t\t\t\t<YAxis type=\"number\" dataKey=\"prediction\" name=\"prediction\" domain={ domain } label={{ value: \"Predicted Change (cents)\", position: \"left\", angle: -90, offset: 0 }} />\n\t\t\t\t\t<ZAxis dataKey=\"z\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n\t\t\t\t\t<Scatter data={ graphData } fill=\"#82ca9d\" shape=\"circle\" />\n\t\t\t\t\t<Scatter line={{ stroke: \"#e16162\", strokeWidth: 1 }} data={ regressionLine } shape=\"circle\" fill=\"#e16162\" />\n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n}\nDotChartPrice.propTypes = {\n\tdata: PropTypes.array,\n};\n\nfunction DotChartDifference ({ data }) {\n\tconst graphData = _.map( data, ({ actual, prediction, close }) => ({ actual: Number(( actual - close ).toFixed( 4 )), prediction: Number(( prediction - close ).toFixed( 4 )), z: 1 }));\n\tconst regressionData = _.map( graphData, ({ actual, prediction }) => ([ actual, prediction ]));\n\tconst regressionLineFunc = linearRegressionLine( linearRegression( regressionData ));\n\n\tconst largestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual > prediction ) return actual > total ? actual : total;\n\t\treturn prediction > total ? prediction: total;\n\t}, -Infinity );\n\tconst smallestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = _.get( current, \"actual\" );\n\t\tconst prediction = _.get( current, \"prediction\" );\n\t\tif ( actual < prediction ) return actual < total ? actual : total;\n\t\treturn prediction < total ? prediction: total;\n\t}, Infinity );\n\tconst domain =  [ smallestVal, largestVal ];\n\n\tconst regressionLine = [\n\t\t{ actual: domain[ 0 ], prediction: regressionLineFunc( domain[ 0 ]) },\n\t\t{ actual: domain[ 1 ], prediction: regressionLineFunc( domain[ 1 ]) },\n\t];\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Prediction difference distribution scatter</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 50, bottom: 20, right: 70, left: 20 }}>\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<XAxis type=\"number\" dataKey=\"actual\" name=\"actual\" domain={ domain } label={{ value: \"Actual Change (cents)\", position: \"bottom\", offset: 0 }} />\n\t\t\t\t\t<YAxis type=\"number\" dataKey=\"prediction\" name=\"prediction\" domain={ domain } label={{ value: \"Predicted Change (cents)\", position: \"left\", angle: -90, offset: 0 }} />\n\t\t\t\t\t<ZAxis dataKey=\"z\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n\t\t\t\t\t<Scatter data={ graphData } fill=\"#82ca9d\" shape=\"circle\" />\n\t\t\t\t\t<Scatter line={{ stroke: \"#e16162\", strokeWidth: 1 }} data={ regressionLine } shape=\"circle\" fill=\"#e16162\" />\n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n}\nDotChartDifference.propTypes = {\n\tdata: PropTypes.array,\n};\n\nfunction DistributionChart ({ data }) {\n\tconst numberOfIntervals = 50;\n    \n\tconst variations = _.map( data, ({ actual, prediction }) => Number(( actual - prediction ).toFixed( 4 )));\n\tconst range = 2 * max([ 0 - min( variations ), max( variations ) ]);\n\tconst intervalLength = range / numberOfIntervals; \n\tconst sampleMean = mean( variations );\n\tconst actualsStDev = standardDeviation( variations );\n\tconst start = range / 2 * -1;\n\n\tconst graphData = _.map( _.range( 0, numberOfIntervals + 1 ), i => {\n\t\tconst bottom = Number(( start + intervalLength * ( i - 0.5 )).toFixed( 5 ));\n\t\tconst middle = Number(( start + intervalLength * ( i )).toFixed( 5 ));\n\t\tconst top = Number(( start + intervalLength * ( i + 0.5 )).toFixed( 5 )); \n\t\tconst matchedVariations = _.filter( variations, variation => variation > bottom && variation <= top );\n\t\treturn { name: middle, value: _.size( matchedVariations ), size: 0 };\n\t});\n    \n\tconst positiveStDevLineX = sampleMean + actualsStDev;\n\tconst negativeStDevLineX = sampleMean - actualsStDev;\n        \n\treturn (\n\t\t<>\n\t\t\t<h3>Variations distribution</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 20, bottom: 20, left: -25 }} >\n\t\t\t\t\t<XAxis dataKey=\"name\" />\n\t\t\t\t\t<YAxis dataKey=\"value\" />\n\t\t\t\t\t<ZAxis dataKey=\"size\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }}/>\n\t\t\t\t\t<Scatter data={ graphData } line={{ stroke: \"#82ca9d\", strokeWidth: 1 }} stroke=\"#82ca9d\" />\n\t\t\t\t\t<ReferenceLine x={ sampleMean } stroke=\"#C98BBE\" label={{ value: \"Mean\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ positiveStDevLineX } stroke=\"#C98BBE\" label={{ value: \"+ σ\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ negativeStDevLineX } stroke=\"#C98BBE\" label={{ value: \"- σ\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n}\nDistributionChart.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst Stats = ({ data }) => {\n\tconst sampleCount = _.size( data );\n    \n\tconst differences = _.map( data, ({ actual, prediction, close }) => ({ actual: Number(( actual - close ).toFixed( 4 )), prediction: Number(( prediction - close ).toFixed( 4 )) }));\n    \n\tconst actualsStDev = standardDeviation( _.map( differences, \"actual\" ));\n\tconst negActualsStDev = actualsStDev * -1;\n    \n\tconst upwardSamples = _.filter( differences, ({ actual }) => actual > actualsStDev );\n\tconst downwardSamples = _.filter( differences, ({ actual }) => actual < negActualsStDev );\n\tconst flatSamples = _.filter( differences, ({ actual }) => actual >= negActualsStDev && actual <= actualsStDev );\n\n\tconst upwardCorrect = _.filter( upwardSamples, ({ prediction }) => prediction > actualsStDev );\n\tconst downwardsCorrect = _.filter( downwardSamples, ({ prediction }) => prediction < actualsStDev );\n\tconst flatCorrect = _.filter( flatSamples, ({ prediction }) => prediction >= negActualsStDev && prediction <= actualsStDev );\n    \n\tconst percUpwardCorrect = _.size( upwardCorrect ) / _.size( upwardSamples ) * 100;\n\tconst percDownwardsCorrect = _.size( downwardsCorrect ) / _.size( downwardSamples ) * 100;\n\tconst percFlatCorrect = _.size( flatCorrect ) / _.size( flatSamples ) * 100;\n\n\tconst variations = _.map( differences, ({ actual, prediction }) => Number(( actual - prediction ).toFixed( 4 )));\n\tconst sampleMean = mean( variations );\n\tconst sampleStandardDev = standardDeviation( variations );\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Basic Stats</h3>\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Number of Samples:</td>\n\t\t\t\t\t\t<td>{ sampleCount }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Sample mean:</td>\n\t\t\t\t\t\t<td>{ ( sampleMean ).toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Sample Standard Deviation:</td>\n\t\t\t\t\t\t<td>{ ( sampleStandardDev ).toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Percentage of samples which predicted up and were correct:</td>\n\t\t\t\t\t\t<td>{ _.size( upwardCorrect ) } / { _.size( upwardSamples ) } = { percUpwardCorrect.toFixed( 1 ) }%</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Percentage of samples which predicted downward and were correct:</td>\n\t\t\t\t\t\t<td>{ _.size( downwardsCorrect ) } / { _.size( downwardSamples ) } = { percDownwardsCorrect.toFixed( 1 ) }%</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Percentage of samples which predicted flat and were correct:</td>\n\t\t\t\t\t\t<td>{ _.size( flatCorrect ) } / { _.size( flatSamples ) } = { percFlatCorrect.toFixed( 1 ) }%</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</>\n\t);\n};\nStats.propTypes = {\n\tdata: PropTypes.array,\n};\n","\nimport React from \"react\";\nimport PropTypes from \"proptypes\";\nimport _ from \"lodash\";\nimport { ResponsiveContainer, ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, ReferenceLine } from \"recharts\";\nimport { linearRegression, linearRegressionLine, min, max, mean, standardDeviation } from \"simple-statistics\";\n\nexport default function Change ({ data }) {    \n\treturn (\n\t\t<div className=\"charts change\">\n\t\t\t<hr />\n\t\t\t<div className=\"stats\">\n\t\t\t\t<Stats data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"distribution\">\n\t\t\t\t<DistributionChart data={ data } />\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"scatter\">\n\t\t\t\t<DotChart data={ data } />\n\t\t\t</div>\n\t\t</div> \n\t);\n}\nChange.propTypes = {\n\tdata: PropTypes.array,\n};\n\nfunction DotChart ({ data }) {\n\tconst graphData = _.map( data, ({ actual, prediction }) => ({ actual: Number(( actual ).toFixed( 4 ) * 100 ), prediction: Number(( prediction ).toFixed( 4 ) * 100 ), z: 1 }));\n\tconst regressionData = _.map( graphData, ({ actual, prediction }) => ([ actual, prediction ]));\n\tconst regressionLineFunc = linearRegressionLine( linearRegression( regressionData ));\n\tconst actualsStDev = standardDeviation( _.map( graphData, \"actual\" ));\n\tconst negActualsStDev = actualsStDev * -1;\n\n\tconst largestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = Math.abs( _.get( current, \"actual\" ));\n\t\tconst prediction = Math.abs( _.get( current, \"prediction\" ));\n\t\tif ( actual > prediction ) return actual > total ? actual : total;\n\t\treturn prediction > total ? prediction: total;\n\t}, -Infinity );\n\tconst domain =  [ -1 * Math.ceil( largestVal * 2 ) / 2, 1 * Math.ceil( largestVal * 2 ) / 2 ];\n\n\tconst regressionLine = [\n\t\t{ actual: domain[ 0 ], prediction: regressionLineFunc( domain[ 0 ]) },\n\t\t{ actual: domain[ 1 ], prediction: regressionLineFunc( domain[ 1 ]) },\n\t];\n    \n\n\treturn (\n\t\t<>\n\t\t\t<h3>Predictions vs Actuals scatter</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 50, bottom: 20, right: 70, left: 20 }}>\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<XAxis type=\"number\" dataKey=\"actual\" name=\"actual\" domain={ domain } label={{ value: \"Actual Change (cents)\", position: \"bottom\", offset: 0 }} />\n\t\t\t\t\t<YAxis type=\"number\" dataKey=\"prediction\" name=\"prediction\" domain={ domain } label={{ value: \"Predicted Change (cents)\", position: \"left\", angle: -90, offset: 0 }} />\n\t\t\t\t\t<ZAxis dataKey=\"z\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n\t\t\t\t\t<Scatter data={ graphData } fill=\"#82ca9d\" shape=\"circle\" />\n\t\t\t\t\t<Scatter line={{ stroke: \"#e16162\", strokeWidth: 1 }} data={ regressionLine } shape=\"circle\" fill=\"#e16162\" />\n\t\t\t\t\t<ReferenceLine x={ actualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"+ σ\", position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ negActualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"- σ\", position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine y={ actualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"+ σ\", position: \"insideTopLeft\" }} />\n\t\t\t\t\t<ReferenceLine y={ negActualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"- σ\", position: \"insideTopLeft\" }} /> \n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n}\nDotChart.propTypes = {\n\tdata: PropTypes.array,\n};\n\nfunction DistributionChart ({ data }) {\n\tconst numberOfIntervals = 50;\n    \n\tconst variations = _.map( data, ({ actual, prediction }) => Number(( actual - prediction ).toFixed( 4 ) * 100 ));\n\tconst range = 2 * max([ 0 - min( variations ), max( variations ) ]);\n\tconst intervalLength = range / numberOfIntervals; \n\tconst sampleMean = mean( variations );\n\tconst actualsStDev = standardDeviation( variations );\n\tconst start = range / 2 * -1;\n\n\tconst graphData = _.map( _.range( 0, numberOfIntervals + 1 ), i => {\n\t\tconst bottom = Number(( start + intervalLength * ( i - 0.5 )).toFixed( 5 ));\n\t\tconst middle = Number(( start + intervalLength * ( i )).toFixed( 5 ));\n\t\tconst top = Number(( start + intervalLength * ( i + 0.5 )).toFixed( 5 )); \n\t\tconst matchedVariations = _.filter( variations, variation => variation > bottom && variation <= top );\n\t\treturn { name: middle, value: _.size( matchedVariations ), size: 0 };\n\t});\n    \n\tconst positiveStDevLineX = sampleMean + actualsStDev;\n\tconst negativeStDevLineX = sampleMean - actualsStDev;\n\tconsole.log( negativeStDevLineX, positiveStDevLineX );\n        \n\treturn (\n\t\t<>\n\t\t\t<h3>Variations distribution</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 20, bottom: 20, left: -25 }} >\n\t\t\t\t\t<XAxis dataKey=\"name\" />\n\t\t\t\t\t<YAxis dataKey=\"value\" />\n\t\t\t\t\t<ZAxis dataKey=\"size\" range={[ 1, 10 ]} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }}/>\n\t\t\t\t\t<Scatter data={ graphData } line={{ stroke: \"#82ca9d\", strokeWidth: 1 }} stroke=\"#82ca9d\" />\n\t\t\t\t\t<ReferenceLine x={ sampleMean } stroke=\"#C98BBE\" label={{ value: \"Mean\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ positiveStDevLineX } stroke=\"#C98BBE\" label={{ value: \"+ σ\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ negativeStDevLineX } stroke=\"#C98BBE\" label={{ value: \"- σ\", orientation: 90, position: \"insideBottomRight\" }} />\n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n}\nDistributionChart.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst Stats = ({ data }) => {\n\tconst sampleCount = _.size( data );\n    \n\tconst actualsStDev = standardDeviation( _.map( data, \"actual\" ));\n\tconst negActualsStDev = actualsStDev * -1;\n    \n\tconst upwardSamples = _.filter( data, ({ actual }) => actual > actualsStDev );\n\tconst downwardSamples = _.filter( data, ({ actual }) => actual < negActualsStDev );\n\tconst flatSamples = _.filter( data, ({ actual }) => actual >= negActualsStDev && actual <= actualsStDev );\n\n\tconst upwardCorrect = _.filter( upwardSamples, ({ prediction }) => prediction > actualsStDev );\n\tconst downwardsCorrect = _.filter( downwardSamples, ({ prediction }) => prediction < actualsStDev );\n\tconst flatCorrect = _.filter( flatSamples, ({ prediction }) => prediction >= negActualsStDev && prediction <= actualsStDev );\n    \n\tconst percUpwardCorrect = _.size( upwardCorrect ) / _.size( upwardSamples ) * 100;\n\tconst percDownwardsCorrect = _.size( downwardsCorrect ) / _.size( downwardSamples ) * 100;\n\tconst percFlatCorrect = _.size( flatCorrect ) / _.size( flatSamples ) * 100;\n\n\tconst variations = _.map( data, ({ actual, prediction }) => Number(( actual - prediction ).toFixed( 4 ) * 100 ));\n\tconst sampleMean = mean( variations );\n\tconst sampleStandardDev = standardDeviation( variations );\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Basic Stats</h3>\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Number of Samples:</td>\n\t\t\t\t\t\t<td>{ sampleCount }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Sample mean:</td>\n\t\t\t\t\t\t<td>{ ( sampleMean ).toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Sample Standard Deviation:</td>\n\t\t\t\t\t\t<td>{ ( sampleStandardDev ).toFixed( 5 ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Percentage of samples which predicted up and were correct:</td>\n\t\t\t\t\t\t<td>{ _.size( upwardCorrect ) } / { _.size( upwardSamples ) } = { percUpwardCorrect.toFixed( 1 ) }%</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Percentage of samples which predicted downward and were correct:</td>\n\t\t\t\t\t\t<td>{ _.size( downwardsCorrect ) } / { _.size( downwardSamples ) } = { percDownwardsCorrect.toFixed( 1 ) }%</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Percentage of samples which predicted flat and were correct:</td>\n\t\t\t\t\t\t<td>{ _.size( flatCorrect ) } / { _.size( flatSamples ) } = { percFlatCorrect.toFixed( 1 ) }%</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</>\n\t);\n};\nStats.propTypes = {\n\tdata: PropTypes.array,\n};\n","\nimport React, { useEffect, useState } from \"react\";\nimport { useQuery, useLazyQuery } from \"@apollo/react-hooks\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner , faCheck, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport _ from \"lodash\";\nimport gql from \"graphql-tag\";\nimport { max } from \"simple-statistics\";\nimport Absolute from \"./Views/Absolute\";\nimport Change from \"./Views/Change\";\n\nconst GET_VERSIONS = gql`\nquery GetVersions {\n    versions { id prediction_type }\n}\n`;\n\nconst GET_PREDICTIONS = gql`\nquery GetPredictions ( $version: Int!, $was_back_predicted: [Boolean!] ) {\n    predictions ( where: { \n        prediction: { _is_null: false }, \n        actual: { _is_null: false }, \n        _version: { _eq: $version }, \n        was_back_predicted: { _in: $was_back_predicted }\n    }) {\n        actual id time\n        instrument\n        prediction\n        _version\n        close\n    }\n}`;\n\nexport default function Home () {\n\tconst [ instrument, setInstrument ] = useState( false );\n\tconst [ version, setVersion ] = useState( -1 );\n\tconst [ includeBackPredicted, setIncludeBackPredicted ] = useState( true );\n    \n\tconst { data: versionsData } = useQuery( GET_VERSIONS );\n\tconst [ getPredictions, { data, loading }] = useLazyQuery( GET_PREDICTIONS );\n\t// eslint-disable-next-line\n\tuseEffect(() => getPredictions({ variables: { version, was_back_predicted: includeBackPredicted ? [ true, false ] : [ false ] }}), [ version, includeBackPredicted ]);\n\n\tconst predictions = _.get( data, \"predictions\" );\n\n\tconst versions = _.map( _.get( versionsData, \"versions\" ), \"id\" );\n\t// eslint-disable-next-line\n\tuseEffect(() => { if ( version === -1 && !_.isEmpty( versions )) setVersion( max( versions )); }, [ versions ]);\n\n\tconst prediction_type = _.get( _.find( _.get( versionsData, \"versions\" ), [ \"id\", version ]), \"prediction_type\" );\n\tconst instruments = _.uniq( _.map( predictions, \"instrument\" ));\n\t// eslint-disable-next-line\n    useEffect(() => setInstrument( _.first( instruments )), [ instruments, version ]);\n        \n\tconst filteredPredictions = _.filter( predictions, [ \"instrument\", instrument ]);\n    \n\tconsole.log( instrument, version, prediction_type, filteredPredictions );\n\n\treturn (\n\t\t<div className=\"body\">\n\t\t\t<div className=\"header\">\n\t\t\t\t<h1>Visualisation and Stats analysis of my ML model</h1>\n\t\t\t\t<p>All predictions pulled for my model, visualised and analysed.</p>\n\t\t\t</div>\n\t\t\t<div className=\"options\">\n\t\t\t\t<div>\n\t\t\t\t\t<p>Select Version:</p>\n\t\t\t\t\t<select value={ version } onChange={ e => setVersion( Number( e.target.value ))}>\n\t\t\t\t\t\t{ !_.isEmpty( versions ) && _.map( versions, version => <option key={ version } value={ version }>{ version }</option> ) }\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<p>Select Instruments:</p>\n\t\t\t\t\t<select value={ instrument } onChange={ e => setInstrument( e.target.value )}>\n\t\t\t\t\t\t{ !_.isEmpty( instruments ) && _.map( instruments, instrument => <option key={ instrument } value={ instrument }>{ instrument }</option> ) }\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div onClick={ () => setIncludeBackPredicted( !includeBackPredicted ) }>\n\t\t\t\t\t<p>Include back-predicted results</p>\n\t\t\t\t\t{ includeBackPredicted ? <FontAwesomeIcon icon={ faCheck } /> : <FontAwesomeIcon icon={ faTimes } className=\"unchecked\" /> }\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{ ( loading || !version ) ? \n\t\t\t\t<div className=\"loader\">\n\t\t\t\t\t<FontAwesomeIcon icon={ faSpinner } spin size=\"3x\" />\n\t\t\t\t</div>\n\t\t\t\t:\n\t\t\t\t<>\n\t\t\t\t\t{ !_.isEmpty( filteredPredictions ) ? \n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{ prediction_type === \"absolute\" && <Absolute data={ filteredPredictions } /> }\n\t\t\t\t\t\t\t{ prediction_type === \"change\" && <Change data={ filteredPredictions } /> }\n\t\t\t\t\t\t</>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<p>Nothing to display - change a filter!</p>\n\t\t\t\t\t}\n\t\t\t\t</>\n\t\t\t}\n\t\t</div>\n\t);\n}\n","\nimport React from \"react\";\nimport Home from \"./Home\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\n\n\nexport default function App () {\n\tconst client = new ApolloClient({\n\t\turi: \"https://boiling-ridge-24261.herokuapp.com/v1/graphql\",\n\t});\n\n\treturn (\n\t\t<ApolloProvider client={ client }>\n\t\t\t<Home />\n\t\t</ApolloProvider>\n\t);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById( \"root\" ),\n);\n"],"sourceRoot":""}