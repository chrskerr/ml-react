{"version":3,"sources":["Home.js","App.js","webpack:///./src/index.js?b635"],"names":["GET_VERSIONS","gql","GET_PREDICTIONS","Home","useState","instrument","setInstrument","version","setVersion","versionsData","useQuery","data","useLazyQuery","getPredictions","loading","useEffect","variables","predictions","_","get","versions","map","isEmpty","max","instruments","uniq","first","instrumentsVersionsPredictions","filter","className","value","onChange","e","target","key","icon","faSpinner","spin","size","DotChart","memo","graphData","actual","prediction","Number","toFixed","regressionData","largestVal","reduce","total","current","Math","abs","Infinity","domain","ceil","regressionLineFunc","linearRegressionLine","linearRegression","regressionLine","actualsStDev","standardDeviation","negActualsStDev","margin","top","bottom","type","dataKey","name","label","position","offset","angle","cursor","strokeDasharray","fill","shape","line","stroke","strokeWidth","x","y","isEqual","DistributionChart","variations","range","min","intervalLength","start","numberOfIntervals","i","middle","matchedVariations","variation","left","dot","Stats","sampleCount","upwardSamples","downwardSamples","flatSamples","upwardCorrect","downwardsCorrect","flatCorrect","percUpwardCorrect","percDownwardsCorrect","percFlatCorrect","sampleMean","mean","sampleStandardDev","App","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e0bbe76.chunk.js","sourcesContent":["\nimport React, { memo, useEffect, useState } from \"react\";\nimport PropTypes from \"proptypes\";\nimport { useQuery, useLazyQuery } from \"@apollo/react-hooks\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\nimport _ from \"lodash\";\nimport gql from \"graphql-tag\";\nimport { ResponsiveContainer, ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, ComposedChart, Line, ReferenceLine } from \"recharts\";\nimport { linearRegression, linearRegressionLine, min, max, mean, standardDeviation } from \"simple-statistics\";\n\nconst GET_VERSIONS = gql`\nquery GetVersions {\n    versions { id }\n}\n`;\n\nconst GET_PREDICTIONS = gql`\nquery GetPredictions ( $version: Int! ) {\n    predictions ( where: { prediction: { _is_null: false }, actual: { _is_null: false }, _version: { _eq: $version }}) {\n        actual id time\n        instrument\n        prediction\n        _version\n    }\n}`;\n\nexport default function Home () {\n\tconst [ instrument, setInstrument ] = useState( false );\n\tconst [ version, setVersion ] = useState( -1 );\n    \n\tconst { data: versionsData } = useQuery( GET_VERSIONS );\n\tconst [ getPredictions, { data, loading }] = useLazyQuery( GET_PREDICTIONS );\n\t// eslint-disable-next-line\n\tuseEffect(() => getPredictions({ variables: { version }}), [ version ]);\n\n\tconst predictions = _.get( data, \"predictions\" );\n\n\tconst versions = _.map( _.get( versionsData, \"versions\" ), \"id\" );\n\t// eslint-disable-next-line\n\tuseEffect(() => { if ( version === -1 && !_.isEmpty( versions )) setVersion( max( versions )); }, [ versions ]);\n\n\tconst instruments = _.uniq( _.map( predictions, \"instrument\" ));\n\t// eslint-disable-next-line\n\tuseEffect(() => { if ( !instrument ) setInstrument( _.first( instruments ));}, [ instruments ]);\n    \n\tconst instrumentsVersionsPredictions = _.filter( predictions, [ \"instrument\", instrument ]);\n    \n\treturn (\n\t\t<div className=\"body\">\n\t\t\t<div className=\"header\">\n\t\t\t\t<h1>Visualisation and Stats analysis of my ML model</h1>\n\t\t\t\t<p>All predictions pulled for my model, visualised and analysed.</p>\n\t\t\t</div>\n\n\t\t\t<div className=\"options\">\n\t\t\t\t<div>\n\t\t\t\t\t<p>Select Version:</p>\n\t\t\t\t\t<select value={ version } onChange={ e => setVersion( e.target.value )}>\n\t\t\t\t\t\t{ !_.isEmpty( versions ) && _.map( versions, version => <option key={ version } value={ version }>{ version }</option> ) }\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<p>Select Instruments:</p>\n\t\t\t\t\t<select value={ instrument } onChange={ e => setInstrument( e.target.value )}>\n\t\t\t\t\t\t{ !_.isEmpty( instruments ) && _.map( instruments, instrument => <option key={ instrument } value={ instrument }>{ instrument }</option> ) }\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{ ( loading || !version ) ? \n\t\t\t\t<div className=\"loader\">\n\t\t\t\t\t<FontAwesomeIcon icon={ faSpinner } spin size=\"3x\" />\n\t\t\t\t</div>\n\t\t\t\t:\n\t\t\t\t<>{ !_.isEmpty( instrumentsVersionsPredictions ) ?\n\t\t\t\t\t<div className=\"chart\">\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t<div className=\"stats\">\n\t\t\t\t\t\t\t<Stats data={ instrumentsVersionsPredictions } />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t<div className=\"scatter\">\n\t\t\t\t\t\t\t<DotChart data={ instrumentsVersionsPredictions } />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t<div className=\"distribution\">\n\t\t\t\t\t\t\t<DistributionChart data={ instrumentsVersionsPredictions } />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div> \n\t\t\t\t\t:\n\t\t\t\t\t<p>Nothing to display - change a filter!</p>\n\t\t\t\t}</>\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nconst DotChart = memo( function DotChart ({ data }) {\n\tconst graphData = _.map( data, ({ actual, prediction }) => ({ actual: Number(( actual * 100 ).toFixed( 4 )), prediction: Number(( prediction * 100 ).toFixed( 4 )) }));\n\tconst regressionData = _.map( data, ({ actual, prediction }) => ([ actual * 100, prediction * 100 ]));\n\n\tconst largestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = Math.abs( _.get( current, \"actual\" ));\n\t\tconst prediction = Math.abs( _.get( current, \"prediction\" ));\n\t\tif ( actual > prediction ) return actual > total ? actual : total;\n\t\treturn prediction > total ? prediction: total;\n\t}, -Infinity );\n\tconst domain = [ -1 * Math.ceil( largestVal * 2 ) / 2, 1 * Math.ceil( largestVal * 2 ) / 2 ];\n\n\tconst regressionLineFunc = linearRegressionLine( linearRegression( regressionData ));\n\tconst regressionLine = [\n\t\t{ actual: domain[ 0 ], prediction: regressionLineFunc( domain[ 0 ]) },\n\t\t{ actual: domain[ 1 ], prediction: regressionLineFunc( domain[ 1 ]) },\n\t];\n    \n\tconst actualsStDev = standardDeviation( _.map( graphData, \"actual\" ));\n\tconst negActualsStDev = actualsStDev * -1;\n    \n\treturn (\n\t\t<>\n\t\t\t<h3>Predictions vs Actuals scatter</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ScatterChart margin={{ top: 20, bottom: 20 }} data={ graphData }>\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<XAxis type=\"number\" dataKey=\"actual\" name=\"actual\" domain={ domain } label={{ value: \"Actual Change (cents)\", position: \"bottom\", offset: 0 }} />\n\t\t\t\t\t<YAxis type=\"number\" dataKey=\"prediction\" name=\"prediction\" domain={ domain } label={{ value: \"Predicted Change (cents)\", position: \"centerBottom\", angle: -90, offset: 5 }} />\n\t\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n\t\t\t\t\t<Scatter data={ graphData } fill=\"#82ca9d\" shape=\"triangle\" />\n\t\t\t\t\t<Scatter line={{ stroke: \"#e16162\", strokeWidth: 1 }} data={ regressionLine } shape=\"circle\" fill=\"#e16162\" />\n\t\t\t\t\t<ReferenceLine x={ actualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"+ σ\", position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine x={ negActualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"- σ\", position: \"insideBottomRight\" }} />\n\t\t\t\t\t<ReferenceLine y={ actualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"+ σ\", position: \"insideTopLeft\" }} />\n\t\t\t\t\t<ReferenceLine y={ negActualsStDev } stroke=\"#C98BBE\" strokeDasharray=\"3 6\" label={{ value: \"- σ\", position: \"insideTopLeft\" }} />\n\t\t\t\t</ScatterChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n}, _.isEqual );\nDotChart.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst DistributionChart = memo( function DistributionChart ({ data }) {\n\tconst numberOfIntervals = 20;\n    \n\tconst variations = _.map( data, ({ actual, prediction }) => Number(( actual - prediction ).toFixed( 4 ) * 100 ));\n\tconst range = 2 * max([ 0 - min( variations ), max( variations ) ]);\n\tconst intervalLength = range / numberOfIntervals; \n    \n\tconst start = range / 2 * -1;\n\n\tconst graphData = _.map( _.range( 0, numberOfIntervals + 1 ), i => {\n\t\tconst bottom = Number(( start + intervalLength * ( i - 0.5 )).toFixed( 5 ));\n\t\tconst middle = Number(( start + intervalLength * ( i )).toFixed( 5 ));\n\t\tconst top = Number(( start + intervalLength * ( i + 0.5 )).toFixed( 5 )); \n\t\tconst matchedVariations = _.filter( variations, variation => variation > bottom && variation <= top );\n\t\treturn { name: middle, value: _.size( matchedVariations ) };\n\t});\n        \n\treturn (\n\t\t<>\n\t\t\t<h3>Variations distribution</h3>\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<ComposedChart data={ graphData } margin={{ top: 20, bottom: 20, left: -25 }} >\n\t\t\t\t\t<XAxis dataKey=\"name\" />\n\t\t\t\t\t<YAxis dataKey=\"value\" />\n\t\t\t\t\t<Tooltip />\n\t\t\t\t\t<Line type=\"natural\" dataKey=\"value\" stroke=\"#82ca9d\" dot={ false } />\n\t\t\t\t\t<ReferenceLine x={ 0 } stroke=\"#C98BBE\" label={{ value: \"0\", position: \"insideBottomRight\" }} />\n\t\t\t\t</ComposedChart>\n\t\t\t</ResponsiveContainer>\n\t\t</>\n\t);\n}, _.isEqual );\nDistributionChart.propTypes = {\n\tdata: PropTypes.array,\n};\n\nconst Stats = ({ data }) => {\n\tconst sampleCount = _.size( data );\n    \n\tconst actualsStDev = standardDeviation( _.map( data, \"actual\" ));\n\tconst negActualsStDev = actualsStDev * -1;\n    \n\tconst upwardSamples = _.filter( data, ({ actual }) => actual > actualsStDev );\n\tconst downwardSamples = _.filter( data, ({ actual }) => actual < negActualsStDev );\n\tconst flatSamples = _.filter( data, ({ actual }) => actual >= negActualsStDev && actual <= actualsStDev );\n\n\tconst upwardCorrect = _.filter( upwardSamples, ({ prediction }) => prediction > actualsStDev );\n\tconst downwardsCorrect = _.filter( downwardSamples, ({ prediction }) => prediction < actualsStDev );\n\tconst flatCorrect = _.filter( flatSamples, ({ prediction }) => prediction >= negActualsStDev && prediction <= actualsStDev );\n    \n\tconst percUpwardCorrect = _.size( upwardCorrect ) / _.size( upwardSamples ) * 100;\n\tconst percDownwardsCorrect = _.size( downwardsCorrect ) / _.size( downwardSamples ) * 100;\n\tconst percFlatCorrect = _.size( flatCorrect ) / _.size( flatSamples ) * 100;\n\n\tconst variations = _.map( data, ({ actual, prediction }) => Number(( actual - prediction ).toFixed( 4 )));\n\tconst sampleMean = mean( variations );\n\tconst sampleStandardDev = standardDeviation( variations );\n\n\n\treturn (\n\t\t<>\n\t\t\t<h3>Basic Stats</h3>\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Number of Samples:</td>\n\t\t\t\t\t\t<td>{ sampleCount }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Sample mean:</td>\n\t\t\t\t\t\t<td>{ ( sampleMean ).toFixed( 5 ) * 100 }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Sample Standard Deviation (have not checked if curve is normal..):</td>\n\t\t\t\t\t\t<td>{ ( sampleStandardDev ).toFixed( 5 ) * 100 }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Percentage of samples which predicted up and were correct:</td>\n\t\t\t\t\t\t<td>{ _.size( upwardCorrect ) } / { _.size( upwardSamples ) } = { percUpwardCorrect.toFixed( 1 ) }%</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Percentage of samples which predicted downward and were correct:</td>\n\t\t\t\t\t\t<td>{ _.size( downwardsCorrect ) } / { _.size( downwardSamples ) } = { percDownwardsCorrect.toFixed( 1 ) }%</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Percentage of samples which predicted flat and were correct:</td>\n\t\t\t\t\t\t<td>{ _.size( flatCorrect ) } / { _.size( flatSamples ) } = { percFlatCorrect.toFixed( 1 ) }%</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</>\n\t);\n};\nStats.propTypes = {\n\tdata: PropTypes.array,\n};\n","\nimport React from \"react\";\nimport Home from \"./Home\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\n\n\nexport default function App () {\n\tconst client = new ApolloClient({\n\t\turi: \"https://boiling-ridge-24261.herokuapp.com/v1/graphql\",\n\t});\n\n\treturn (\n\t\t<ApolloProvider client={ client }>\n\t\t\t<Home />\n\t\t</ApolloProvider>\n\t);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById( \"root\" ),\n);\n"],"sourceRoot":""}