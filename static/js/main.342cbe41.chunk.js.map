{"version":3,"sources":["Home.js","App.js","webpack:///./src/index.js?b635"],"names":["SUBSCRIPTION","gql","Home","useSubscription","data","loading","predictions","_","get","className","icon","faSpinner","spin","size","isEmpty","Chart","memo","graphData","map","actual","prediction","largestVal","reduce","total","current","Math","abs","Infinity","domain","margin","top","right","bottom","left","type","dataKey","name","label","value","position","offset","angle","cursor","strokeDasharray","fill","x","isEqual","proptypes","PropTypes","array","App","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","timeout","link","split","query","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"koBAUA,IAAMA,EAAeC,IAAH,KAYH,SAASC,IAAS,IAAD,EACLC,YAAiBH,GAAnCI,EADuB,EACvBA,KAAMC,EADiB,EACjBA,QAERC,EAAcC,IAAEC,IAAKJ,EAAM,2BAEjC,OACC,yBAAKK,UAAU,QACd,yBAAKA,UAAU,UACd,+EACA,6FAGCJ,GACD,yBAAKI,UAAU,UACd,kBAAC,IAAD,CAAiBC,KAAOC,IAAYC,MAAI,EAACC,KAAK,SAI7CN,IAAEO,QAASR,IACb,yBAAKG,UAAU,SACd,kBAAC,EAAD,CAAOL,KAAOE,MAOnB,IAAMS,EAAQC,gBAAM,YAA2B,IAATZ,EAAQ,EAARA,KAC/Ba,EAAYV,IAAEW,IAAKd,GAAM,kBAA6B,CAAEe,OAAiB,IAAhD,EAAGA,OAAkDC,WAAyB,IAA9E,EAAWA,eAEpCC,EAAad,IAAEe,OAAQL,GAAW,SAAEM,EAAOC,GAChD,IAAML,EAASM,KAAKC,IAAKnB,IAAEC,IAAKgB,EAAS,WACnCJ,EAAaK,KAAKC,IAAKnB,IAAEC,IAAKgB,EAAS,eAC7C,OAAKL,EAASC,GAAcD,EAASI,EAAeJ,EAASI,EAAQJ,EAASI,EACzEH,EAAaD,GAAUC,EAAaG,EAAeH,EAAaG,EAAQH,EAAYG,OAAzF,KACGI,KACEC,EAAS,EAAG,EAAIP,EAAYA,GAElC,OACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAcQ,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,KAC7D,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,SAASC,QAAQ,SAASC,KAAK,SAASR,OAASA,EAASS,MAAO,CAAEC,MAAO,wBAAyBC,SAAU,SAAUC,OAAQ,KAC3I,kBAAC,IAAD,CAAON,KAAK,SAASC,QAAQ,aAAaC,KAAK,aAAaR,OAASA,EAASS,MAAO,CAAEC,MAAO,2BAA4BC,SAAU,eAAgBE,OAAQ,GAAID,OAAQ,KACxK,kBAAC,IAAD,CAASE,OAAQ,CAAEC,gBAAiB,SACpC,kBAAC,IAAD,CAASP,KAAK,WAAWhC,KAAOa,EAAY2B,KAAK,YACjD,kBAAC,IAAD,CAAeC,EAAI,QAIpBtC,IAAEuC,SACL/B,EAAMgC,UAAY,CACjB3C,KAAM4C,IAAUC,O,8DC/DF,SAASC,IAEvB,IAAMC,EAAW,IAAIC,IAAS,CAC7BC,IAAK,yDAGAC,EAAS,IAAIC,IAAc,CAChCF,IAAK,qDACLG,QAAS,CACRC,WAAW,EACXC,QAAS,OAILC,EAAOC,aACZ,YAAgB,IAAbC,EAAY,EAAZA,MAAY,EACcC,YAAmBD,GAAvCE,EADM,EACNA,KAAMC,EADA,EACAA,UACd,MAAgB,wBAATD,GAAgD,iBAAdC,IAE1CV,EACAH,GAGKc,EAAS,IAAIC,IAAa,CAC/BP,OACAQ,MAAO,IAAIC,MAGZ,OACC,kBAAC,IAAD,CAAgBH,OAASA,GACxB,kBAAC/D,EAAD,OCpCHmE,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAACrB,EAAD,OAEDsB,SAASC,eAAgB,W","file":"static/js/main.342cbe41.chunk.js","sourcesContent":["\nimport React, { memo } from \"react\";\nimport PropTypes from \"proptypes\";\nimport { useSubscription } from \"@apollo/react-hooks\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\nimport _ from \"lodash\";\nimport gql from \"graphql-tag\";\nimport { ResponsiveContainer, ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, ReferenceLine } from \"recharts\";\n\nconst SUBSCRIPTION = gql`\nsubscription SubcribeVersions {\n\tversions( limit: 1, order_by: { id: desc }) {\n\t\tid\n\t\tpredictions ( where: { prediction: { _is_null: false }, actual: { _is_null: false }}) {\n\t\t\tactual id time\n\t\t\tinstrument\n\t\t\tprediction\n\t\t}\n\t}\n}`;\n\nexport default function Home () {\n\tconst { data, loading } = useSubscription( SUBSCRIPTION );\n\n\tconst predictions = _.get( data, \"versions[0].predictions\" );\n\n\treturn (\n\t\t<div className=\"body\">\n\t\t\t<div className=\"header\">\n\t\t\t\t<h2>Visualisation and Stats analysis of my ML model</h2>\n\t\t\t\t<p>All predictions pulled for my model, visualised and analysed.</p>\n\t\t\t</div>\n\n\t\t\t{ loading && \n\t\t\t\t<div className=\"loader\">\n\t\t\t\t\t<FontAwesomeIcon icon={ faSpinner } spin size=\"3x\" />\n\t\t\t\t</div> \n\t\t\t}\n\n\t\t\t{ !_.isEmpty( predictions ) && \n\t\t\t\t<div className=\"chart\">\n\t\t\t\t\t<Chart data={ predictions } />\n\t\t\t\t</div> \n\t\t\t}\n\t\t</div>\n\t);\n}\n\nconst Chart = memo( function Chart ({ data }) {\n\tconst graphData = _.map( data, ({ actual, prediction }) => ({ actual: actual * 100, prediction: prediction * 100 }));\n\n\tconst largestVal = _.reduce( graphData, ( total, current ) => {\n\t\tconst actual = Math.abs( _.get( current, \"actual\" ));\n\t\tconst prediction = Math.abs( _.get( current, \"prediction\" ));\n\t\tif ( actual > prediction && actual > total ) return actual > total ? actual : total;\n\t\tif ( prediction > actual && prediction > total ) return prediction > total ? prediction: total;\n\t}, -Infinity );\n\tconst domain = [ -1 * largestVal, largestVal ];\n\t\n\treturn (\n\t\t<ResponsiveContainer>\n\t\t\t<ScatterChart margin={{ top: 20, right: 20, bottom: 20, left: 20 }}>\n\t\t\t\t<CartesianGrid />\n\t\t\t\t<XAxis type=\"number\" dataKey=\"actual\" name=\"actual\" domain={ domain } label={{ value: \"Actual Change (cents)\", position: \"bottom\", offset: 0 }} />\n\t\t\t\t<YAxis type=\"number\" dataKey=\"prediction\" name=\"prediction\" domain={ domain } label={{ value: \"Predicted Change (cents)\", position: \"centerBottom\", angle: -90, offset: 5 }}/>\n\t\t\t\t<Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n\t\t\t\t<Scatter name=\"A school\" data={ graphData } fill=\"#f9bc60\" />\n\t\t\t\t<ReferenceLine x={ 0 } />\n\t\t\t</ScatterChart>\n\t\t</ResponsiveContainer>\n\t);\n}, _.isEqual );\nChart.proptypes = {\n\tdata: PropTypes.array,\n};\n","\nimport React from \"react\";\nimport Home from \"./Home\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-client\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { split } from \"apollo-link\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nexport default function App () {\n\n\tconst httpLink = new HttpLink({\n\t\turi: \"https://boiling-ridge-24261.herokuapp.com/v1/graphql\",\n\t});\n    \n\tconst wsLink = new WebSocketLink({\n\t\turi: \"wss://boiling-ridge-24261.herokuapp.com/v1/graphql\",\n\t\toptions: {\n\t\t\treconnect: true,\n\t\t\ttimeout: 30000,\n\t\t},\n\t});\n\n\tconst link = split(\n\t\t({ query }) => {\n\t\t\tconst { kind, operation } = getMainDefinition( query );\n\t\t\treturn kind === \"OperationDefinition\" && operation === \"subscription\";\n\t\t},\n\t\twsLink,\n\t\thttpLink,\n\t);\n\n\tconst client = new ApolloClient({\n\t\tlink,\n\t\tcache: new InMemoryCache(),\n\t});\n\n\treturn (\n\t\t<ApolloProvider client={ client }>\n\t\t\t<Home />\n\t\t</ApolloProvider>\n\t);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById( \"root\" ),\n);\n"],"sourceRoot":""}